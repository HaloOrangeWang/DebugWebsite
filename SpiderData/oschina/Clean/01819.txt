
异常

异常就是程序运行时发生错误的信号，在python中,错误触发的异常如下


异常种类

　　在python中不同的异常可以用不同的类型（python中统一了类与类型，类型即类）去标识，不同的类对象标识不同的异常，一个异常标识一种错误

常见异常：

AttributeError 试图访问一个对象没有的树形，比如foo.x，但是foo没有属性x
IOError 输入/输出异常；基本上是无法打开文件
ImportError 无法引入模块或包；基本上是路径问题或名称错误
IndentationError 语法错误（的子类） ；代码没有正确对齐
IndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[5]
KeyError 试图访问字典里不存在的键
KeyboardInterrupt Ctrl+C被按下
NameError 使用一个还未被赋予对象的变量
SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）
TypeError 传入对象类型与要求的不符合
UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，
导致你以为正在访问它
ValueError 传入一个调用者不期望的值，即使值的类型是正确的


其他异常：

ArithmeticError
AssertionError
AttributeError
BaseException
BufferError
BytesWarning
DeprecationWarning
EnvironmentError
EOFError
Exception
FloatingPointError
FutureWarning
GeneratorExit
ImportError
ImportWarning
IndentationError
IndexError
IOError
KeyboardInterrupt
KeyError
LookupError
MemoryError
NameError
NotImplementedError
OSError
OverflowError
PendingDeprecationWarning
ReferenceError
RuntimeError
RuntimeWarning
StandardError
StopIteration
SyntaxError
SyntaxWarning
SystemError
SystemExit
TabError
TypeError
UnboundLocalError
UnicodeDecodeError
UnicodeEncodeError
UnicodeError
UnicodeTranslateError
UnicodeWarning
UserWarning
ValueError
Warning
ZeroDivisionError


异常处理

　　python解释器检测到错误，触发异常（也允许程序员自己触发异常）。程序员编写特定的代码，专门用来捕捉这个异常（这段代码与程序逻辑无关，与异常处理有关）。如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃，这就是异常处理。

　　python解释器去执行程序，检测到了一个错误时，触发异常，异常触发后且没被处理的情况下，程序就在当前异常处终止，后面的代码不会运行，谁会去用一个运行着突然就崩溃的软件。所以你必须提供一种异常处理机制来增强你程序的健壮性与容错性。良好的容错能力，能够有效的提高用户体验，维持业务的稳定性。

　　程序运行中的异常可以分为两类：语法错误和逻辑错误。首先，我们必须知道，语法错误跟异常处理无关，所以我们在处理异常之前，必须避免语法上的错误。


异常处理的方式　

1.使用if判断式

#我们平时用if做的一些简单的异常处理
num1=input('>>: ') #输入一个字符串试试
if num1.isdigit():
    int(num1) #我们的正统程序放到了这里,其余的都属于异常处理范畴
elif num1.isspace():
    print('输入的是空格,就执行我这里的逻辑')
elif len(num1) == 0:
    print('输入的是空,就执行我这里的逻辑')
else:
    print('其他情情况,执行我这里的逻辑')
#这些if，跟代码逻辑并无关系，显得可读性极差，如果类似的逻辑多，那么每一次都需要判断这些内容，就会倒置我们的代码特别冗长。

　　使用if判断式可以异常处理，但是if判断式的异常处理只能针对某一段代码，对于不同的代码段的相同类型的错误你需要写重复的if来进行处理。而且在你的程序中频繁的写与程序本身无关，与异常处理有关的if，会使得你的代码可读性极其的差。

2.python提供的特定的语法结构


part1:基本语法

try:
     被检测的代码块
except 异常类型：
     try中一旦检测到异常，就执行这个位置的逻辑


part2:单分支

#单分支只能用来处理指定的异常情况，如果未捕获到异常，则报错
try:
    a
except NameError as e:  #我们可以使用except与as+变量名 搭配使用，打印变量名会直接输出报错信息
    print(e)   #name 'a' is not defined


part3:多分支

l1 = [('电脑',16998),('鼠标',59),('手机',8998)]
while 1:
    for key,value in enumerate(l1,1):
        print(key,value[0])
    try:
        num = input('>>>')
        price = l1[int(num)-1][1]
    except ValueError:
        print('请输入一个数字')
    except IndexError:
        print('请输入一个有效数字')
#这样通过异常处理可以使得代码更人性化，用户体验感更好。


part4:万能异常

　　在python的异常中，有一个万能异常：Exception，他可以捕获任意异常。它是一把双刃剑，有利有弊，我们要视情况使用

　　如果你想要的效果是，无论出现什么异常，我们统一丢弃，或者使用同一段代码逻辑去处理他们，那么只有一个Exception就足够了。

　　如果你想要的效果是，对于不同的异常我们需要定制不同的处理逻辑，那就需要用到多分支了。我们可以使用多分支+万能异常来处理异常。使用多分支优先处理一些能预料到的错误类型,一些预料不到的错误类型应该被最终的万能异常捕获。需要注意的是，万能异常一定要放在最后，否则就没有意义了。


part5:try...else语句

try:
    for i in range(10):
        int(i)
except IndexError as e:
    print(e)
else:
    print('***********')   #***********   执行了此处
    #当try语句中的代码没有异常，被完整地执行完，就执行else中的代码


part6:try...finally语句

def dealwith_file():
    try:
        f = open('file',encoding='utf-8')
        for line in f:
            int(line)
        return True
    except Exception as e:
        print(e)
        return False
    finally:
        '''不管try语句中的代码是否报错,都会执行finally分支中的代码'''
        '''去完成一些连接操作的收尾工作'''
        print('finally 被执行了')
        f.close()
ret = dealwith_file()
print(ret)


part7:主动触发异常

try:
    raise TypeError('类型错误')
except Exception as e:
    print(e)


part8:自定义异常

class EvaException(BaseException):
    def __init__(self,msg): self.msg=msg def __str__(self): return self.msg try: raise EvaException('类型错误') except EvaException as e: print(e)


part9:断言

assert断言是声明其布尔值必须为真的判定，如果发生异常就说明表达示为假。可以理解assert断言语句为raise-if-not，用来测试表示式，其返回值为假，就会触发异常。

assert的异常参数，其实就是在断言表达式后添加字符串信息，用来解释断言并更好的知道是哪里出了问题。格式如下：
 assert expression [, arguments]
 assert 表达式 [, 参数]

assert len(lists) >=5,'列表元素个数小于5'

assert 2==1,'2不等于1'

备注：格式：assert  条件  ， 条件为false时的错误信息            结果为raise一个AssertionError出来

# assert 条件
 
assert 1 == 1
 
assert 1 == 2


part10：try..except的方式比较if的方式的好处

try..except这种异常处理机制就是取代if那种方式，让你的程序在不牺牲可读性的前提下增强健壮性和容错性

异常处理中为每一个异常定制了异常类型（python中统一了类与类型，类型即类），对于同一种异常，一个except就可以捕捉到，可以同时处理多段代码的异常（无需‘写多个if判断式’）减少了代码，增强了可读性

异常处理语法的小结：

try:
    # 可能发生异常的代码
except 异常类型1 as 变量名:
    print(变量名) # 变量名存储的是具体的错误信息
except 异常类型2 as 变量名:
    print(变量名) # 变量名存储的是具体的错误信息
except Exception as 变量名:
    print(变量名) # 变量名存储的是具体的错误信息
else:
    print('如果以上代码没有发生异常以及异常处理工作就执行这里的代码')
    print('一般情况下else中的代码用来下结论')
    # logging模块
finally:
    print('不管代码是否有异常都会执行,且在函数中遇到return仍然会执行')
    print('一般情况下用于这个函数中资源的回收')

　　先完成功能 在测试的时候 一边修改代码 一边加上异常处理，只要加上异常处理,一定要写日志,不要在大段的代码外直接套上异常处理。应该是在具体的逻辑上(具体的细节处的代码段)加上细粒度异常处理。对于可以预料到的异常 一定要尽力的疏导 如果不能解决 必须要写上提示以及引发错误的原因

