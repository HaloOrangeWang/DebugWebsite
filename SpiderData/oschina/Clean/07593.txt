
1. 格式化输出

现在有以下需求,让⽤户输入name, age, job,hobby 然后输出如下所⽰:

------------ info of Alex Li -----------
Name : Alex Li
Age : 22
job : Teacher
Hobbie: girl
------------- end -----------------

你怎么实现呢？你会发现，⽤字符拼接的⽅式还难实现这种格式的输出，所以⼀起来学⼀下新知识，只需要把要打印的格式先准备好, 由于⾥⾯的⼀些信息是需要⽤户输⼊的，你没办法预先知道，因此可以先放置个占位符，再把字符串⾥的占位符与外部的变量做个映射关系就好。

name = input("Name:")
age = input("Age:")
job = input("Job:")
hobby = input("Hobbie:")
info = '''
------------ info of %s ----------- #这⾥的每个%s就是⼀个占位符，本⾏的代表 后⾯拓号⾥的 name
Name : %s #代表 name
Age : %s #代表 age
job : %s #代表 job
Hobbie: %s #代表 hobbie
------------- end -----------------
''' % (name,name,age,job,hobbie) # 这⾏的 % 号就是 把前⾯的字符串 与拓号 后⾯的 变量 关联起来
print(info)

%s就是代表字符串占位符，除此之外，还有%d, 是数字占位符， 如果把上⾯的age后⾯的换成%d，就代表你必须只能输⼊数字。

这时对应的数据必须是int类型，否则程序会报错。

使⽤时,需要进⾏类型转换。

int(str) # 字符串转换成int
str(int) # int转换成字符串

类似这样的操作在后⾯还有很多。

如果, 你头铁。就不想转换。觉着转换很麻烦. 也可以全部都⽤%s。因为任何东⻄都可以直接转换成字符串--> 仅限%s

现在⼜来新问题了。如果想输出:

我叫xxx, 今年xx岁了,我们已经学习了2%的python基础了

这⾥的问题出在哪⾥呢? 没错2%, 在字符串中如果使⽤了%s这样的占位符. 那么所有的%都将变成占位符. 我们的2%也变成了 占位符. ⽽"%的"是不存在的, 这⾥我们需要使⽤%%来表⽰字符串中的%。

注意: 如果你的字符串中没有使⽤过%s，%d站位。那么不需要考虑这么多，该%就%.没⽑病老铁。

print("我叫%s, 今年22岁了, 学习python2%%了" % '王尼玛') # 有%占位符
print("我叫王尼玛, 今年22岁, 已经凉凉了100%了") # 没有占位符


2. 基本运算符

计算机可以进行的运算有很多种，可不只加减乘除这么简单，运算按种类可分为：

算术运算、比较运算、逻辑运算、赋值运算、成员运算、身份运算、位运算。

这章我们暂只学习算数运算、⽐较运算、逻辑运算、赋值运算


2.1 算术运算

以下假设变量：a=10，b=20


2.2 比较运算

以下假设变量：a=10，b=20


2.3 逻辑运算

以下假设变量：a=10，b=20

针对逻辑运算的进⼀步研究： 　　

1.在没有()的情况下not 优先级⾼于 and，and优先级⾼于or，即优先级关系为( )>not>and>or，同⼀优先级从左往 右计算。

() > not > and > or

例题： 判断下列逻辑语句的True，False。

3>4 or 4<3 and 1==1
1 < 2 and 3 < 4 or 1>2
2 > 1 and 3 < 4 or 4 > 5 and 2 < 1
1 > 2 and 3 < 4 or 4 > 5 and 2 > 1 or 9 < 8
1 > 1 and 3 < 4 or 4 > 5 and 2 > 1 and 9 > 8 or 7 < 6
not 2 > 1 and 3 < 4 or 4 > 5 and 2 > 1 and 9 > 8 or 7 < 6

2.

x or y , 如果x是0 返回y, 如果x是非零, 返回x

x and y, 如果x是0 返回x, 如果x是非零, 返回y

not x,如果是0，返回True，如果x是非零, 返回False

例题：求出下列逻辑语句的值。

8 or 4
0 and 3
0 or 4 and 3 or 7 or 9 and 6


2.4 赋值运算

以下假设变量：a=10，b=20


3. 编码的问题

python2解释器在加载 .py⽂件中的代码时，会对内容进⾏编码（默认ascill）,⽽python3对内容进⾏编码的默认为utf8。

计算机:

早期，计算机是美国发明的，普及率不⾼，⼀般只是在美国使⽤。所以， 最早的编码结构就是按照美国⼈的习惯来编码的。 对应数字+字⺟+特殊字符⼀共也没多少， 所以就形成了最早的编码ASCII码，直到今天ASCII依然深深的影响着我们。

ASCII（American Standard Code for Information Interchange，美国标准信息交换代码）是基于拉丁字⺟的⼀套电脑编码系统，主要⽤于显示现代英语和其他⻄欧语⾔，其最多只能⽤ 8 位来表示（⼀个字节），即：2**8 = 256，所以，ASCII码最多只能表示 256个符号。

随着计算机的发展，以及普及率的提⾼，流⾏到欧洲和亚洲，这时ASCII码就不合适了。⽐如: 中⽂汉字有⼏万个，⽽ASCII 最多也就256个位置，所以ASCII不⾏了。怎么办呢? 这时, 不同的国家就提出了不同的编码⽤来适⽤于各⾃的语⾔环境，⽐如，中国的GBK，GB2312， BIG5，ISO-8859-1等等，这时各个国家都可以使⽤计算机了。

GBK，国标码占⽤2个字节。对应ASCII码 GBK直接兼容，因为计算机底层是⽤英⽂写的， 你不⽀持英⽂肯定不⾏，⽽英⽂已经使⽤了ASCII码， 所以GBK要兼容ASCII。

这⾥GBK国标码，前⾯的ASCII码部分，由于使⽤两个字节，所以对于ASCII码⽽⾔，前9位都是0。

字⺟A:0100 0001 # ASCII
字⺟A:0000 0000 0100 0001 # 国标码

国标码的弊端: 只能中国⽤，⽇本就垮了，所以国标码不满⾜我们的使⽤，这时提出了⼀个万国码Unicode。unicode⼀ 开始设计是每个字符两个字节，设计完了，发现我⼤中国汉字依然⽆法进⾏编码，只能进⾏扩充，扩充成32位也就是4个字 节。这回够了，但是，问题来了，中国字9万多，⽽unicode可以表⽰40多亿，根本⽤不了，太浪费了，于是乎, 就提出了新的UTF编码，可变⻓度编码。

UTF-8: 每个字符最少占8位，每个字符占⽤的字节数不定，根据⽂字内容进⾏具体编码。比如，英⽂，就⼀个字节就够了，汉 字占3个字节，这时即满⾜了中⽂，也满⾜了节约，也是⽬前使⽤频率最⾼的⼀种编码。

UTF-16: 每个字符最少占16位。

GBK: 每个字符占2个字节，16位。

单位转换:

8bit = 1byte

1024byte = 1KB

1024KB = 1MB

1024MB = 1GB

1024GB = 1TB

1024TB = 1PB

1024TB = 1EB

1024EB = 1ZB

1024ZB = 1YB

1024YB = 1NB

1024NB = 1DB

补充1: while循环

while 条件:

　　循环体

else: 循环在正常情况跳出之后会执⾏这⾥

index = 1
while index < 11:
 　　if index == 8:
 　　　　# break
　　　　 pass
　　 else:
　　　　 print(index)
　　 index = index+1
else:print("你好")

注意: 如果循环是通过break退出的，那么while后⾯的else将不会被执⾏，只有在while条件判断是假的时候才会执⾏这个else。

pass: 不表⽰任何内容，为了代码的完整性，占位⽽已。

补充2: in和not in

可以判断xxx字符串是否出现在xxxxx字符串中

content = input("请输⼊你的评论")
if "苍⽼师" in content or '邱⽼师' in content:
 　　print('你输⼊的内容不合法')
else:
 　　print("评论成功")

