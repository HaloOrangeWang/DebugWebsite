1、当从文件中读取或从网上爬到的形如\u4e2d\u56fd是字符串，所以，将其转化为中文时：

>>>s='\u4e2d\u56fd'

>>>s=s.decode('unicode_escape')

>>>print s

中国

2、普通字符串与unicode转换

如以utf8编码方式把字符串转化为unicode：

>>>"abc".decode('utf8')

u'abc'

等价于：unicode('abc','utf8')

3、有汉字的字符串

如

>>>'中国'.decode('gbk')

u'\u4e2d\u56fd'

汉字编码只能写成gbk或gb2312

把上面的结果再转化成gbk

>>>u'\u4e2d\u56fd'.encode('gbk')

4、字符串本身是unicode形式

如

>>>s=u'中国'

此时就不必将其转化为unicode，直接可以转化为gbk

>>>s=s.encode('gbk')

>>>print s

中国

字符串在Python内部的表示是unicode编码，因此，在做编码转换时，通常需要以unicode作为中间编码，即先将其他编码的字符串解码（decode）成unicode，再从unicode编码（encode）成另一种编码。

decode的作用是将其他编码的字符串转换成unicode编码，如str1.decode('gb2312')，表示将gb2312编码的字符串str1转换成unicode编码。

encode的作用是将unicode编码转换成其他编码的字符串，如str2.encode('gb2312')，表示将unicode编码的字符串str2转换成gb2312编码。

因此，转码的时候一定要先搞明白，字符串str是什么编码，然后decode成unicode，然后再encode成其他编码

代码中字符串的默认编码与代码文件本身的编码一致。

如：s='中文'

如果是在utf8的文件中，该字符串就是utf8编码，如果是在gb2312的文件中，则其编码为gb2312。这种情况下，要进行编码转换，都需要先用decode方法将其转换成unicode编码，再使用encode方法将其转换成其他编码。通常，在没有指定特定的编码方式时，都是使用的系统默认编码创建的代码文件。

如果字符串是这样定义：s=u'中文'

则该字符串的编码就被指定为unicode了，即python的内部编码，而与代码文件本身的编码无关。因此，对于这种情况做编码转换，只需要直接使用encode方法将其转换成指定编码即可。

如果一个字符串已经是unicode了，再进行解码则将出错，因此通常要对其编码方式是否为unicode进行判断：

isinstance(s, unicode)  #用来判断是否为unicode

用非unicode编码形式的str来encode会报错

如何获得系统的默认编码？

#!/usr/bin/env python

#coding=utf-8

import sys

print sys.getdefaultencoding()

该段程序在英文WindowsXP上输出为：ascii

