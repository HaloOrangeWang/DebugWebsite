
语法错误

Python 的语法错误或者称之为解析错，如下实例：

for i in range(0,100)    print(i)

程序运行出错：

for语句结尾少了一个冒号

语法分析器指出了出错的一行，并且在最先找到的错误的位置标记了底色


异常定义

即便Python程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。

大多数的异常都不会被程序处理，都以错误信息的形式展现在这里:

a = '3'

b = 0

c = a + b

print(c)

程序运行会抛出异常：



异常处理

通过try……except:语句进行异常处理：

try:  代码except:  遇到异常处理代码

try语句按照如下方式工作；

首先，执行try子句（在关键字try和关键字except之间的语句）

首先，执行try子句（在关键字try和关键字except之间的语句）

如果没有异常发生，忽略except子句，try子句执行后结束。

如果没有异常发生，忽略except子句，try子句执行后结束。

如果在执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的except子句将被执行。最后执行 try 语句之后的代码。

如果在执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的except子句将被执行。最后执行 try 语句之后的代码。

如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。

如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。

一个 try 语句可能包含多个except子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。

处理程序将只针对对应的try子句中的异常进行处理，而不是其他的 try 的处理程序中的异常。

try:    a = '3'    b = 0    c = a + b    print(c)except:    print('字符型数据不能与整型数据进行加运算！')

程序运行结果：

异常处理对于程序的正常运行起到一个很重要的作用，如上例子，使用了try语句的异常代码，依旧能够正常运转，未使用的则会报错。所以对于容易出现错误或者不知道会不会出错的代码最好使用try语句，这样能大大的提高程序的容错性。try类用法远不只这么简单，感兴趣的小伙伴可深入研究。

