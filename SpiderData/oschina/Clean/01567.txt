
一、纸牌游戏

先来回顾一下，昨天的内容

1. import 一个模块相当于执行这个py文件
2.模块不会被重复导入
3.导入的模块存到sys.modules里
4.导入模块的之后发生了什么：
 　　先看看模块在不在sys.modules里，如果不在：
 　　生成一个属于模块的命名空间
 　　执行py文件
 　　创建一个与py文件同名的变量来引用这个空间中的名字
 　　把导入的这个模块放到sys.modules里

5.from ... import ...
6.绝对导入和相对导入
7.软件开发规范

抽牌

from collections import namedtuple
Card = namedtuple('Card',['rand','suit'])  #定义2个属性，牌面和花色
class FranchDeck:
    ranks = [str(n) for n in range(2,11)] + list('JQKA')  # 列表推导式+列表，组合成13张牌
    suits = ['红心','方板','梅花','黑桃']  # 4种花色

def __init__(self):
        self._cards = [Card(rank,suit) for rank in FranchDeck.ranks
                                        for suit in FranchDeck.suits]  # 取出52张牌,返回一个列表。
        #[Card(rand='2', suit='红心'),Card(rand='2', suit='方板')...]

def __len__(self):
        return len(self._cards)  # 获取列表长度

def __getitem__(self, item):
        return self._cards[item]  # 取一张牌

deck = FranchDeck()
print(deck[0])  # 取第一张牌
from random import choice
print(choice(deck))  # 随机选择一张牌
print(choice(deck))

执行输出：

Card(rand='2', suit='红心')
Card(rand='K', suit='黑桃')
Card(rand='J', suit='方板')

上面的代码靠__len__和__getitem__ 实现抽牌，每次拿到的牌是不一样的

描述一张牌

from collections import namedtuple
Card = namedtuple('Card',['rand','suit'])  #定义2个属性，牌面和花色
print(Card('2','红心'))

执行输出：

Card(rand='2', suit='红心')

洗牌

from collections import namedtuple
Card = namedtuple('Card',['rand','suit'])  #定义2个属性，牌面和花色
class FranchDeck:
    ranks = [str(n) for n in range(2,11)] + list('JQKA')
    suits = ['红心','方板','梅花','黑桃']

def __init__(self):
        self._cards = [Card(rank,suit) for rank in FranchDeck.ranks
                                        for suit in FranchDeck.suits]

def __len__(self):
        return len(self._cards)

def __getitem__(self, item):
        return self._cards[item]

def __setitem__(self, key, value):
        self._cards[key] = value

deck = FranchDeck()
# print(deck[0]) #抽第一张牌
from random import choice
# print(choice(deck))
# print(choice(deck))

from random import shuffle
shuffle(deck)  # 打乱次序,洗牌
#print(deck[:5])  # 抽5张牌
print(deck[:])  # ,每次52张牌是不一样的。

执行输出：

[Card(rand='8', suit='黑桃'), Card(rand='J', suit='红心'), Card(rand='9', suit='黑桃'), Card(rand='K', suit='方板'), Card(rand='3', suit='红心'), Card(rand='A', suit='红心'), Card(rand='9', suit='方板'), Card(rand='10', suit='黑桃'), Card(rand='8', suit='梅花'), Card(rand='K', suit='梅花'), Card(rand='K', suit='红心'), Card(rand='J', suit='方板'), Card(rand='8', suit='红心'), Card(rand='10', suit='梅花'), Card(rand='6', suit='梅花'), Card(rand='A', suit='方板'), Card(rand='7', suit='红心'), Card(rand='7', suit='黑桃'), Card(rand='3', suit='黑桃'), Card(rand='4', suit='红心'), Card(rand='6', suit='红心'), Card(rand='9', suit='红心'), Card(rand='J', suit='黑桃'), Card(rand='2', suit='黑桃'), Card(rand='3', suit='梅花'), Card(rand='5', suit='黑桃'), Card(rand='A', suit='黑桃'), Card(rand='5', suit='梅花'), Card(rand='A', suit='梅花'), Card(rand='4', suit='方板'), Card(rand='K', suit='黑桃'), Card(rand='J', suit='梅花'), Card(rand='6', suit='黑桃'), Card(rand='Q', suit='黑桃'), Card(rand='10', suit='方板'), Card(rand='5', suit='红心'), Card(rand='2', suit='梅花'), Card(rand='5', suit='方板'), Card(rand='Q', suit='方板'), Card(rand='6', suit='方板'), Card(rand='4', suit='梅花'), Card(rand='9', suit='梅花'), Card(rand='Q', suit='梅花'), Card(rand='4', suit='黑桃'), Card(rand='7', suit='方板'), Card(rand='3', suit='方板'), Card(rand='7', suit='梅花'), Card(rand='Q', suit='红心'), Card(rand='8', suit='方板'), Card(rand='2', suit='方板'), Card(rand='2', suit='红心'), Card(rand='10', suit='红心')]


二、异常和错误

程序中难免出现错误，而错误分成两种

1.语法错误（这种错误，根本过不了python解释器的语法检测，必须在程序执行前就改正）

if name = 10:

2.逻辑错误（逻辑错误）

num = 0
100/num

执行输出：

这个蓝色链接信息，是Pycharm做的，它可以跳转到指定的代码位置

ZeroDivisionError是python解释器报的

什么是异常

异常就是程序运行时发生错误的信号，在python中,错误触发的异常如下


python中的异常种类

在python中不同的异常可以用不同的类型（python中统一了类与类型，类型即类）去标识，不同的类对象标识不同的异常，一个异常标识一种错误

触发IndexError

l=['egon','aa']
l[3]

触发KeyError

dic={'name':'egon'}
dic['age']

触发ValueError

s='hello'
int(s)

常用异常

AttributeError 试图访问一个对象没有的树形，比如foo.x，但是foo没有属性x
IOError 输入/输出异常；基本上是无法打开文件
ImportError 无法引入模块或包；基本上是路径问题或名称错误
IndentationError 语法错误（的子类） ；代码没有正确对齐
IndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[5]
KeyError 试图访问字典里不存在的键
KeyboardInterrupt Ctrl+C被按下
NameError 使用一个还未被赋予对象的变量
SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）
TypeError 传入对象类型与要求的不符合
UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，
导致你以为正在访问它
ValueError 传入一个调用者不期望的值，即使值的类型是正确的

更多异常

ArithmeticError
AssertionError
AttributeError
BaseException
BufferError
BytesWarning
DeprecationWarning
EnvironmentError
EOFError
Exception
FloatingPointError
FutureWarning
GeneratorExit
ImportError
ImportWarning
IndentationError
IndexError
IOError
KeyboardInterrupt
KeyError
LookupError
MemoryError
NameError
NotImplementedError
OSError
OverflowError
PendingDeprecationWarning
ReferenceError
RuntimeError
RuntimeWarning
StandardError
StopIteration
SyntaxError
SyntaxWarning
SystemError
SystemExit
TabError
TypeError
UnboundLocalError
UnicodeDecodeError
UnicodeEncodeError
UnicodeError
UnicodeTranslateError
UnicodeWarning
UserWarning
ValueError
Warning
ZeroDivisionError


三、异常处理

什么是异常？

异常发生之后,异常之后的代码就不执行了

什么是异常处理

python解释器检测到错误，触发异常（也允许程序员自己触发异常）
程序员编写特定的代码，专门用来捕捉这个异常（这段代码与程序逻辑无关，与异常处理有关）
如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃，这就是异常处理

为什么要进行异常处理？

python解析器去执行程序，检测到了一个错误时，触发异常，异常触发后且没被处理的情况下，程序就在当前异常处终止，后面的代码不会运行，谁会去用一个运行着突然就崩溃的软件。
所以你必须提供一种异常处理机制来增强你程序的健壮性与容错性

如何进行异常处理？

首先须知，异常是由程序的错误引起的，语法上的错误跟异常处理无关，必须在程序运行前就修正

一、使用if判断式

正常的代码

num1=input('>>: ') #输入一个字符串试试
int(num1)

执行就报错了

使用if判断，进行异常处理

num1=input('>>: ') #输入一个字符串试试
if num1.isdigit():
    int(num1) #我们的正统程序放到了这里,其余的都属于异常处理范畴
elif num1.isspace():
    print('输入的是空格,就执行我这里的逻辑')
elif len(num1) == 0:
    print('输入的是空,就执行我这里的逻辑')
else:
    print('其他情情况,执行我这里的逻辑')

'''
问题一：
使用if的方式我们只为第一段代码加上了异常处理，但这些if，跟你的代码逻辑并无关系，这样你的代码会因为可读性差而不容易被看懂

问题二：
这只是我们代码中的一个小逻辑，如果类似的逻辑多，那么每一次都需要判断这些内容，就会倒置我们的代码特别冗长。

总结：

1.if判断式的异常处理只能针对某一段代码，对于不同的代码段的相同类型的错误你需要写重复的if来进行处理。
2.在你的程序中频繁的写与程序本身无关，与异常处理有关的if，会使得你的代码可读性极其的差
3.if是可以解决异常的，只是存在1,2的问题，所以，千万不要妄下定论if不能用来异常处理。

def test():
    print('test running')
choice_dic={
    '1':test
}
while True:
    choice=input('>>: ').strip()
    if not choice or choice not in choice_dic:continue #这便是一种异常处理机制啊
    choice_dic[choice]()

二：python为每一种异常定制了一个类型，然后提供了一种特定的语法结构用来进行异常处理

part1:基本语法

try:
     被检测的代码块
except 异常类型：
     try中一旦检测到异常，就执行这个位置的逻辑

f = open('a.txt')
g = (line.strip() for line in f)
for line in g:
    print(line)
else:
    f.close()

如果文件不存在，提示报错

FileNotFoundError: [Errno 2] No such file or directory: 'a.txt'

try:
    f = open('a.txt')
    g = (line.strip() for line in f)
    print(next(g))
    print(next(g))
    print(next(g))
    print(next(g))
    print(next(g))
except StopIteration:
    f.close()

'''
next(g)会触发迭代f，依次next(g)就可以读取文件的一行行内容，无论文件a.txt有多大，同一时刻内存中只有一行内容。
提示：g是基于文件句柄f而存在的，因而只能在next(g)抛出异常StopIteration后才可以执行f.close()

即使文件只有一行，多次读取也不会报错。

part2:异常类只能用来处理指定的异常情况，如果非指定异常则无法处理。

# 未捕获到异常，程序直接报错

s1 = 'hello'
try:
    int(s1)
except IndexError as e:
    print(e)

执行输出：

ValueError: invalid literal for int() with base 10: 'hello'

part3:多分支

s1 = 'hello'
try:
    int(s1)
except IndexError as e:
    print(e)
except KeyError as e:
    print(e)
except ValueError as e:
    print(e)

执行输出：

invalid literal for int() with base 10: 'hello'

part4:万能异常 在python的异常中，有一个万能异常：Exception，他可以捕获任意异常，即：

如果分支太多了，写不过来呢？这个时候，就需要用到万能异常

s1 = 'hello'
try:
    int(s1)
except Exception as e:
    print(e)

执行输出:

invalid literal for int() with base 10: 'hello'

你可能会说既然有万能异常，那么我直接用上面的这种形式就好了，其他异常可以忽略
你说的没错，但是应该分两种情况去看

1.如果你想要的效果是，无论出现什么异常，我们统一丢弃，或者使用同一段代码逻辑去处理他们，那么骚年，大胆的去做吧，只有一个Exception就足够了。

s1 = 'hello'
try:
    int(s1)
except Exception,e:
    '丢弃或者执行其他逻辑'
    print(e)

#如果你统一用Exception，没错，是可以捕捉所有异常，但意味着你在处理所有异常时都使用同一个逻辑去处理（这里说的逻辑即当前expect下面跟的代码块）

2.如果你想要的效果是，对于不同的异常我们需要定制不同的处理逻辑，那就需要用到多分支了。

s1 = 'hello'
try:
    int(s1)
except IndexError as e:
    print(e)
except KeyError as e:
    print(e)
except ValueError as e:
    print(e)

s1 = 'hello'
try:
    int(s1)
except IndexError as e:
    print(e)
except KeyError as e:
    print(e)
except ValueError as e:
    print(e)
except Exception as e:
    print(e)

万能异常，必须在单分支异常的后面

try:
    name = 10
except NameError:
    print('触发了NameError')
else:
    print('执行了else里的语句')

这个else的意思就是，没有捕获到异常，就执行else的语句。
也就是说except和else是互斥的(有他没我，有我没他)。

try:
    print('扣第一个人的钱')
    print('给第二个人加钱')
except NameError:
    print('触发了NameError')
else:
    print('转账成功')

执行输出：

扣第一个人的钱
给第二个人加钱
转账成功

但凡用到else，必须要有except。用到except，不一定有else

part5:异常的其他机构

try:
    name
except NameError as n:
    print(n)
else:
    print('try内代码块没有异常则执行我')
finally:
    print('无论异常与否,都会执行该模块,通常是进行清理工作')

结论：

finally 执行try中的代码 不管是否触发了错误 都会执行finally中的代码

finally必须在最下面

看起来没啥卵用，存在即合理，它是有用的。

比如：

try:
    name
finally:
    print('出错了')

执行输出：

出错了
Traceback (most recent call last):
 File "E:/python_script/day30/test.py", line 343, in <module>
 name
NameError: name 'name' is not defined

它是先执行finally,再执行报错

假如打开文件，后续操作过程中出现异常了。

f = open('a.txt')
print('操作f')
name  # 模拟异常
f.close()
print('111')

执行输出：

操作f
Traceback (most recent call last):
 File "E:/python_script/day30/test.py", line 348, in <module>
 name
NameError: name 'name' is not defined

说明，f.clolse()没有执行，它就没有意义了

那么此时文件句柄还在内存中，这样就很浪费内存了

使用finally，就可以完美解决

f = open('a.txt')
try:
    print('操作f')
    name
finally:
    f.close()
    print('关闭文件了!')

执行输出：

操作f
关闭文件了!
Traceback (most recent call last):
 File "E:/python_script/day30/test.py", line 349, in <module>
 name
NameError: name 'name' is not defined

虽然异常了，但是关闭了文件句柄

return也会执行

def func():
    try:
        return 1
    finally:
        print('关闭文件了!')

func()

执行输出：

关闭文件了!

在函数里面，遇到return，下面的代码就不会执行了。但是在这里，finally也依然会执行，就是这么执着!!!

比如装饰器函数

import time
def wrapper(func):
    def inner(*args,**kwargs):
        start = time.time()
        ret = func(*args,**kwargs)
        end = time.time()
        print(end - start)
        return ret
    return inner

@wrapper
def func():
    time.sleep(1)

func()

改造成finally

import time
def wrapper(func):
    def inner(*args,**kwargs):
        try:
            start = time.time()
            ret = func(*args, **kwargs)
            return ret
        finally:
            end = time.time()
            print(end - start)

return inner

@wrapper
def func():
    time.sleep(1)

func()

执行输出：

1.00050950050354

在return之前，会执行finally的代码
等finanlly代码执行之后，再return

finally一般用来做一些收尾工作
比如f.close()
或者关闭网络连接，比如mysql

总结：

try和finally可以直接连用
try只有4种情景

try except try中的代码遇到异常 就执行except中的代码
try except else try中的代码遇到异常 就执行except中的代码 没遇到异常就执行else中的代码
trt except else finally try中的代码遇到异常 就执行except中的代码 没遇到异常就执行else中的代码 无论如何都执行finally中的代码
try finally 不能处理异常了，但是无论是否发生异常，都会执行finally中的代码

这些异常，顺序不能变
比如try else except，这样就会报错。

part6:主动触发异常

raise TypeError

执行输出：

Traceback (most recent call last):
 File "E:/python_script/day30/test.py", line 371, in <module>
 raise TypeError
TypeError

和PHP的raise 很像，也是主动触发异常

比如支付场景

class Payment:
    def pay(self,money):
        raise NotImplementedError('没有实现pay方法')
class Alipay(Payment):
    def pay(self,money):
        print('支付宝支付%s元'%money)

class WechatPay(Payment):
    def fuqian(self,money):
        print('微信支付%s元' % money)

def pay(obj,money):
    obj.pay(money)

we = WechatPay()
pay(we,10)

执行输出：

Traceback (most recent call last):
 File "E:/python_script/day30/test.py", line 387, in <module>
 pay(we,10)
 File "E:/python_script/day30/test.py", line 384, in pay
 obj.pay(money)
 File "E:/python_script/day30/test.py", line 374, in pay
 raise NotImplementedError('没有实现pay方法')
NotImplementedError: 没有实现pay方法

只要子类没有实现pay方法。就会调用pay方法
如果子类有pay方法，就会覆盖父类的pay方法

修改微信支付的方法名，将fuqian改成pay就正常了

class Payment:
    def pay(self,money):
        raise NotImplementedError('没有实现pay方法')
class Alipay(Payment):
    def pay(self,money):
        print('支付宝支付%s元'%money)

class WechatPay(Payment):
    def pay(self,money):
        print('微信支付%s元' % money)

def pay(obj,money):
    obj.pay(money)

we = WechatPay()
pay(we,10)

执行输出：

微信支付10元

part7:自定义异常

BaseException 是异常祖宗的祖宗

class EvaException(BaseException):
    def __init__(self,msg):
        self.msg=msg
    def __str__(self):
        return self.msg

try:
    raise EvaException('类型错误')
except EvaException as e:
    print(e)

执行输出：

类型错误

自己写模块的时候，需要用到自定义异常

part8:断言

语法：

assert 条件

比如：

assert 1 == 2
print('123')

执行输出：

Traceback (most recent call last):
 File "E:/python_script/day30/test.py", line 372, in <module>
 assert 1 == 2
AssertionError

程序没有满足条件，下面的代码都不执行。这个时候，就可以用到断言
它和if的功能类似，但是if它不会报错，断言会报错
如果if判断的条件过多时，写if判断，太麻烦了。
这个时候，就需要用到断言
断言是用到一个非常果决的场景，如果不满足，后面的代码都不执行

捕获断言：

try:
    assert 1 == 2
except AssertionError:
    pass
print(123)

执行输出： 123

不建议，使用try捕获断言。属于脑残行为，为啥呢？人家既然都用断言了，你还捕获个啥？找抽是不是？

part9：try..except的方式比较if的方式的好处

try..except这种异常处理机制就是取代if那种方式，让你的程序在不牺牲可读性的前提下增强健壮性和容错性
异常处理中为每一个异常定制了异常类型（python中统一了类与类型，类型即类），对于同一种异常，一个except就可以捕捉到，可以同时处理多段代码的异常（无需‘写多个if判断式’）减少了代码，增强了可读性

使用try..except的方式
1：把错误处理和真正的工作分开来
2：代码更易组织，更清晰，复杂的工作任务更容易实现；
3：毫无疑问，更安全了，不至于由于一些小的疏忽而使程序意外崩溃了；

什么时候用异常处理

异常处理，是一把双刃剑

有的同学会这么想，学完了异常处理后，好强大，我要为我的每一段程序都加上try...except，干毛线去思考它会不会有逻辑错误啊，这样就很好啊，多省脑细胞===》2B青年欢乐多

try...except应该尽量少用，因为它本身就是你附加给你的程序的一种异常处理的逻辑，与你的主要的工作是没有关系的
这种东西加的多了，会导致你的代码可读性变差，只有在有些异常无法预知的情况下，才应该加上try...except，其他的逻辑错误应该尽量修正

建议：

在代码，没有完全开发完成时，不要乱加try
否则，真正出错时，反而没有报错，这就尴尬了!

