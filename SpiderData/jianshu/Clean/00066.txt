
● Python的错误和异常

在刚学习Python编程时, 经常会看到一些报错信息,在前面我们没有提及。

Python有两种错误很容易辨认:语法错误和异常。

▲ 程序语法错误:

Python的语法错误或者称之为解析错误,在开发之初经常遇到。

△ 语法错误Error

Python的语法错误或者称之为解析错误,在开发之初经常遇到。

>>> while True print('Hello world)

File "", line 1,in ?

while True print('Hello world')

︿

SyntaxError: invalid syntax

这个例子中,函数print()被检查到有错误,是它前面缺少了一个冒号(:)。

语法分析器指出了出错的-行,并且在最先找到的错误的位置标记了-一个小小的箭头。

▲ 异常Except

运行期检测到的错误被称为异常。

大多数的异常都不会被程序处理,都以错误信息的形式展现在这里:

异常的格式：

● 异常以不同的类型出现，这些类型都作为信息的一部分打印出来: 例子中的类型有ZeroDivisionError，NameError 和 TypeError。

● 错误信息的前面部分显示了异常发生的上下文，并以调用栈的形式显示具体信息。

△ 异常的处理的关键字及语法结构

在Python3中使用try..excet..finally关键字处理异常

语法结构:

try:

… 可能出现异常的语句块 …

except 捕获异常的名称:

… 处理异常的语句块 …

finally:

… 异常结束后续执行语句块 …

● Try块中的语句一旦发生异常，则后续语句将会中止执行程序控制流直接跳转至except块中。

● Exept若未能捕获到try块中的异常，则系统报错

● Finally 块中的语句无论是否出现异常均会执行。

● Try块必须伴随except块同时出现，不能独立出现。

△ 异常的处理-多except捕获

1.一个try语句可能包含多个except子句,分别来处理不同的特定的异常。最多只有一个分支会被执行。

2.处理程序将只针对对应的try子句中的异常进行处理,而不是其他的try的处理程序中的异常。

3.一个except子句可以同时处理多个异常,这些异常将被放在一 个括号里成为-个元组,例如:

代码演示:

ch05-demo12-except02.py

● exept异常类名称as异常对象:

● 异常对象可以输出报错的具体信息

△ 异常的处理- try..except...else/finally

●try except else语句还有一个可选的else子句,如果使用这个子句,那么必须放

在所有的except子句之后。这个子句将在try子句没有发生任何异常的时候执行。

例如:

代码演示:

ch05-demo13-except03.py

●else中的语句当try块出现异常时不执行 ,当try块没有异常时则执行。

●同样,若替换成finally则无论try块中是否出现异常, finally中的语句块均执行。

△ 自定义条件手动抛出异常

●在Python语言中,并不能解决开发中所有的错误情况。

因此, Python3为我们提供了raise关键字,可以根据我们自身业务的特殊情况,自定义错误条件并手动抛出异常。

代码演示:

●raise唯一-的一 个参数指定了要被抛出的异常。它必须是一一个异常的实例或者是异常的类(也就是Exception的子类)。

●如果你只想知道这是否抛出了一个异常,并不想去处理它,那么-一个简单的raise语句就可以再次把它抛出。

常见异常类型:

AttributeError试图访问-一个对象没有的属性,比如foo.x ,但是foo没有属性x

IOError输入/输出异常;基本.上是无法打开文件

ImportError无法引入模块或包;基本.上是路径问题或名称错误

IndexError下标索引超出序列边界, 比如当x只有三个元素,却试图访问x[5]

KeyError试图访问字典里不存在的键

NameError尝试访问一个没有申明的变量

SyntaxError Python代码非法,代码不能编译

TypeError传入对象类型与要求的不符合

UnboundLocalError试图访问-一个还未被设置的局部变量,

ValueError传入-一个调用者不期望的值,即使值的类型是正确的

