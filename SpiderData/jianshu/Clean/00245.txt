
简介

程序运行时，如果遇到错误会停止程序执行，并且报错，这就是异常。程序停止执行并且提示错误信息这个动作，称之为：抛出（raise）异常


捕获异常

在程序开发中，如果对某些代码的执行不能确定是否正确，可以增加try(尝试)来捕获异常


语法格式

try:
    尝试执行的代码
except:
    出现错误的处理

try：尝试，下方编写要尝试的代码，不确定是否能够正常执行的代码

except：如果不是，下方编写尝试失败的代码


错误类型捕获

在程序执行时，可能会遇到不同类型的异常，并且需要针对不同类型的异常，做出不同的响应，就需要捕获错误类型

当Python解释器抛出异常时，最后一行错误信息的第一个单词，就是错误类型


语法格式

try:
    # 尝试执行的代码
    pass
except 错误类型1:
    # 针对错误类型2和3，对应的代码处理
    pass
except Exception as result:
    print("未知错误 %s" % result)


捕获未知错误

希望程序无论出现任何错误，都不会因为抛出异常而被终止，可以再增加except


异常捕获完整语法

try:
    # 尝试执行代码
    pass
    
except 错误类型1:
    # 针对错误类型1，对应的代码处理
    pass
except 错误类型2:
    # 针对错误类型1，对应的代码处理
    pass
except (错误类型3，错误类型4):
    # 针对错误类型3和4，对应代码进行处理
    pass
except Exception as result:
    # 打印错误信息
    print(result)
else:
    # 没有异常才会执行的代码
    pass
finally:
    # 无论是否有异常，都会执行的代码
    print("无论是否有异常都会执行的代码")


异常的传递

当函数或方法执行出现异常，会将异常传递给函数或方法的调用一方。如果传递到主程序，仍然没有处理异常，程序才会被终止


抛出（raise）异常

在开发中，如果满足特定业务需求时，希望抛出异常，可以：创建一个Exception的对象，使用raise关键字抛出异常对象

