对于刚入门Python的朋友，在学习过程中运行代码是或多或少会遇到一些错误，刚开始可能看起来比较费劲。随着代码量的积累，熟能生巧当遇到一些运行时错误时能够很快的定位问题原题。下面整理了常见的17个错误，希望能够帮助到大家。

1、语法错误导致报错“SyntaxError ：invalid syntax”

如忘记在if，for，def，elif，else，class等声明末尾加 : ，或者if语句应该使用==（比较操作）而不是 =（赋值操作）。

2、错误的使用缩进量，导致报错“IndentationError：unexpected indent”、“IndentationError：unindent does not match any outer indetation level”以及“IndentationError：expected an indented block”

3、在 for 循环语句中忘记调用 len()，导致报错“TypeError: 'list' object cannot be interpreted as an integer”

通常你想要通过索引来迭代一个list或者string的元素，这需要调用 range() 函数。要记得返回len 值而不是返回这个列表。

该错误发生在如下代码中：

spam = ['cat', 'dog', 'mouse']

for i in range(spam):

print(spam[i])

4、尝试修改string的值，导致报错“TypeError: 'str' object does not support item assignment”。

string是一种不可变的数据类型，该错误发生在如下代码中：

spam = 'I have a pet cat.'

spam[13] = 'r'

print(spam)

而正确做法是：

spam = 'I have a pet cat.'

spam = spam[:13] + 'r' + spam[14:]

print(spam)

5、尝试连接非字符串值与字符串，导致报错“TypeError: Can't convert 'int' object to str implicitly”。

该错误发生在如下代码中：

numEggs = 12

print('I have ' + numEggs + ' eggs.')

而正确做法是：

numEggs = 12

print('I have ' + str(numEggs) + ' eggs.')

或

numEggs = 12

print('I have %s eggs.' % (numEggs))

6、在字符串首尾忘记加引号，导致报错“SyntaxError: EOL while scanning string literal”。

该错误发生在如下代码中：print(Hello!')或print('Hello!)

7、变量或者函数名拼写错误，导致报错“NameError: name 'foo' is not defined”。

该错误发生在如下代码中：

foo = 'Al'

print('My name is ' + fooba)

或spam = Round(4.2) 及 spam = ruond(4.2)

8、在一个定义新变量中使用增值操作符，导致报错“NameError: name 'foo' is not defined”

该错误发生在如下代码中：foo += 4

9、方法名拼写错误，导致报错 “AttributeError: 'str' object has no attribute 'lowerr'”。

该错误发生在如下代码中：

spam = 'THIS IS IN LOWERCASE.'

spam = spam.lowerr()        //方法名错误

10、引用超过list最大索引，导致报错“IndexError: list index out of range”

该错误发生在如下代码中：

spam = ['cat', 'dog', 'mouse']

print(spam[4])

11、使用不存在的字典键值，导致报错“KeyError：‘spam’”

该错误发生在如下代码中：

spam = {'cat': 'Zophie', 'dog': 'Basil'}

print('The name of zebra is ' + spam['zebra'])

12、尝试使用Python关键字作为变量名，导致报错“SyntaxError：invalid syntax”

Python关键不能用作变量名，该错误发生在如下代码中：

class = 'algebra'

Python3的关键字有：and, as, assert, break, class, continue, def, del, elif, else, except, False, finally, for, from, global, if, import, in, is, lambda, None, nonlocal, not, or, pass, raise, return, True, try, while, with, yield

13、在定义局部变量前在函数中使用局部变量（此时有与局部变量同名的全局变量存在）

导致报错“UnboundLocalError: local variable 'foobar' referenced before assignment”

在函数中使用局部变来那个而同时又存在同名全局变量时是很复杂的，使用规则是：如果在函数中定义了任何东西，如果它只是在函数中使用那它就是局部的，反之就是全局变量。

这意味着你不能在定义它之前把它当全局变量在函数中使用。

该错误发生在如下代码中：

foobar = 42

def myFunction():

print(foobar)

foobar = 100

myFunction()

14、尝试使用 range()创建整数列表，导致报错“TypeError: 'range' object does not support item assignment”

有时你想要得到一个有序的整数列表，所以 range() 看上去是生成此列表的不错方式。然而，你需要记住 range() 返回的是 “range object”，而不是实际的 list 值。

该错误发生在如下代码中：

spam = range(10)

spam[4] = -1

正确写法：

spam = list(range(10))

spam[4] = -1

注意：在 Python 2 中 spam = range(10) 是能行的，因为在 Python 2 中 range() 返回的是list值，但是在 Python 3 中就会产生以上错误

15、不存在 ++ 或者 -- 自增自减操作符。导致报错“SyntaxError: invalid syntax”，在Python中是没有这样的操作符的。

16、忘记为方法的第一个参数添加self参数，导致报错“TypeError: myMethod() takes no arguments (1 given)”

该错误发生在如下代码中：

class Foo():

def myMethod():

print('Hello!')

a = Foo()

a.myMethod()

