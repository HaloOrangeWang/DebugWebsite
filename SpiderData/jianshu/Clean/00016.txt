原文：https://lwebapp.com/zh/post/pip-install-error-guide


问题

我们在使用 Python 开发的时候，通常会用到一些好用的第三方库，推荐用 pip 来安装，比如安装 pandas

python -m pip install pandas

一般情况下都没有什么问题，但是有些小伙伴会碰到 pip 安装第三方库报错、pip install 卡住不动等安装失败的情况。

比如以下是 pip 安装第三方库报错的代码

Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None))...

小编在这里就总结下 Python 安装第三方库失败的解决方案有哪些。


解决


方案一

Python 环境因素报错，检查你的电脑下的 Python 和 pip 是否是正常安装好的

# 打印当前Python版本
python --version

运行以上命令如果正常打印出了 Python 版本信息，表明是正常的。报错的话，可能是在 Windows 下安装 Python 的时候环境变量没有配置，可以配置下 Python 环境变量，或者直接把 Python 重新安装到 C 盘，这样就不会有环境变量的问题。

# 打印pip版本
python -m pip --version

运行以上命令如果正常打印出了 pip 版本信息，表明是正常的。报错的话，可以用这个命令安装升级下

python -m ensurepip --upgrade

如果还不能运行 pip，也可以手动安装 pip

打开 https://bootstrap.pypa.io/get-pip.py

右击页面–另存为–保存到任何地方

在 get-pip.py 文件所在目录的命令行执行 python get-pip.py就能成功安装 pip

手动安装 pip 还有个好处，可以直接使用全局 pip 来安装依赖包，比如

pip install pandas


方案二

pip 虽然正常安装了，但有时候会提示你的 pip 版本过低

WARNING: You are using pip version 22.0.3; however, version 22.0.4 is available.
You should consider upgrading via the '/usr/local/bin/python -m pip install --upgrade pip' command.

运行以下命令升级 pip

python -m pip install --upgrade pip


方案三

第三方包名称或者版本号输入错误，比如我在命令行终端安装一个叫 padas 的包

python -m pip install padas

会出现以下报错

ERROR: Could not find a version that satisfies the requirement padas (from versions: none)
ERROR: No matching distribution found for padas

这个错误提示我输入了 padas，提示找不到这个包和它的版本号。这时需要检查包名称是否输入正确，正确的应该是 pandas。（当然文章发布之后，可能有开发者朋友发布了这个包，这里仅仅作为演示）

还有版本号也可能不存在的问题，比如我安装一个高版本的 pandas

python -m pip install pandas==6.5

会出现以下报错

ERROR: Could not find a version that satisfies the requirement pandas==6.5 (from versions: 0.1, 0.2, 0.3.0, 0.4.0, 0.4.1, 0.4.2, 0.4.3, 0.5.0, 0.6.0, 0.6.1, 0.7.0, 0.7.1, 0.7.2, 0.7.3, 0.8.0, 0.8.1, 0.9.0, 0.9.1, 0.10.0, 0.10.1, 0.11.0, 0.12.0, 0.13.0, 0.13.1, 0.14.0, 0.14.1, 0.15.0, 0.15.1, 0.15.2, 0.16.0, 0.16.1, 0.16.2, 0.17.0, 0.17.1, 0.18.0, 0.18.1, 0.19.0, 0.19.1, 0.19.2, 0.20.0, 0.20.1, 0.20.2, 0.20.3, 0.21.0, 0.21.1, 0.22.0, 0.23.0, 0.23.1, 0.23.2, 0.23.3, 0.23.4, 0.24.0, 0.24.1, 0.24.2, 0.25.0, 0.25.1, 0.25.2, 0.25.3, 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2.0, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.3.0, 1.3.1, 1.3.2, 1.3.3, 1.3.4, 1.3.5, 1.4.0rc0, 1.4.0, 1.4.1)
ERROR: No matching distribution found for pandas==6.5

很明显找不到这个版本号，而且把所有可以安装的版本号都告诉你了，我们只需要选择一个我们需要的版本号就可以，或者不指定版本号默认安装最新版本。


方案四

每个地方的网络质量、通信速度都不一样，pip 安装依赖包也会遇到网络超时问题，比如以下报错

raise ReadTimeoutError(self._pool, None, 'Read timed out.')
pip._vendor.requests.packages.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='pypi.org', port=443): Read timed out.

表明是网络超时了，提示连接到 pypi.org 出了问题，这个就是托管 python 依赖包的网站，所有的 pip 包都发布在上面。

我们可以设置加长超时时间，因为大多数地方的网络并不是完全连接不上，只是速度有点感人。这里将默认的超时时间 --default-timeout 设置为 200s

python -m pip --default-timeout=200 install pandas

设置多一点的超时时间，去喝杯茶慢慢等一等，就可能下载好了。


方案五

如果喝完茶后还没下载好，接着考虑换镜像源了，比如我们切换到清华大学的镜像源

# --index-url可以简写为-i
python -m pip install --index-url https://pypi.tuna.tsinghua.edu.cn/simple/ pandas

除了官方源和清华镜像源

清华：https://pypi.tuna.tsinghua.edu.cn/simple/

官方：https://pypi.org/

还有些别的镜像源可以尝试

阿里云：https://mirrors.aliyun.com/pypi/simple/

豆瓣：https://pypi.douban.com/simple/

北京外国语大学 https://mirrors.bfsu.edu.cn/pypi/web/simple/


方案六

除了切换镜像源之外，pip 官方还提供了多种安装依赖包的途径

将依赖包提前下载好，然后从本地路径直接安装

比如我们可以从 pip 官网下载 pandas 的发行包文件，然后在本地依赖包所在目录执行安装命令。

从源码包安装

python -m pip install pandas-1.4.1.tar.gz

或者从构建包安装

# 仅用于 Windows 平台的构建包
python -m pip install pandas-1.4.1-cp310-cp310-win_amd64.whl

所有的 pandas 分发包列表：pandas download files

从任何的 VCS（version control systems 版本控制系统）安装，使用如下格式

python -m pip install -e "vcs+protocol://repo_url/#egg=pkg&subdirectory=pkg_dir"

vcs：版本控制系统名称

protocol：协议

repo_url：仓库地址

egg：包名称

subdirectory：如果包不在项目根目录，指定子目录名称

比如直接从 github 安装 pandas 库

python -m pip install git+https://github.com/pandas-dev/pandas.git#egg=pandas

这种方式会从 github 上拉取最新代码做本地构建，需要的时间比较长，一般也是开发版本。

官方支持非常多的版本控制系统和协议，详细查看 VCS 支持

从 github 安装还支持手动本地安装，将依赖包的 github 仓库直接 clone 下来，在项目目录中执行

python setup.py install

这样就直接安装了这个项目所构建的库，本质上和用 github 远程方式差不多，都需要做本地编译，通常用作本地开发阶段使用，或者想尝试下项目最新特性。

不过如果你通过 pip install 的方式就有网络问题，这种通过 github 安装的方式通常也有一定网络问题。

原文：https://lwebapp.com/zh/post/pip-install-error-guide


方案七

小编尝试了上面几种方案，都无法很完美的满足我的需求，

虽然设置了很长的超时时间，但是有时候网络就是很慢，超时再长也很浪费时间

镜像相比较官方站有一点延后的同步时间，官方 pypi.org 的依赖包最为稳定，同样的问题在前端开发的 npm 包管理中也很常见，镜像源有时候会出现不可预测的错误，而往往切换到官方源就修复了（参照 npm install 报错卡住）

直接下载源码包构建的话，因为很多 Python 库都是外国人写的，网站不在本国家，访问其他国家网站的时候下载速度很慢，从 github 下载也是一样的情况（参照 github clone 很慢）

我们可以考虑一些更科学的上网方式，来加快对官方网站的访问速度。加速之后直接使用pip install安装任何第三方库，基本上几秒钟就可以完成，无需设置超时时间，不需要切换镜像源，无需担心安装包版本延迟问题，想从 pip 官网下载源码包或者使用 github 远程安装 Python 第三方库都非常快。

除此之外，还有以下好处

你在访问一些 Python 第三方库的文档的时候，也可以加快访问速度，比如 pandas 官网 https://pandas.pydata.org/

上 github 学习开源项目源码，使用 git clone 来拉取 github 开源项目的时候，速度提升明显

使用谷歌搜索出的技术文档往往更精准，排在搜索结果前面的都是 stackoverflow 上的高赞回答，非常有用

访问其他一些优秀的技术网站

更科学的方式推荐：官方网站 ➜

不太明白的请参考这位小编的 踩坑经验 ➜


参考

pip 安装第三方库报错最全解决方案

Python 官网

Python 安装依赖包

pip Installation

npm install 报错卡住不动怎么办，npm 安装指南

Python 安装 Github 包,离线包和在线包

