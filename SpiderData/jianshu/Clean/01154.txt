在将模型部署到服务器上面的时候，遇到了编码问题，但是代码在其他的服务器上面都跑得通。字符编码一定得搞透彻，本文后续也会总结编码相关的知识。然后遇到这个问题之后，网上的解决办法如下：

1、最常见的就增加下面代码(但是这个是针对Python2的)：

import sys
reload(sys) 
sys.setdefaultencoding('utf-8')

因为这个是针对Python2，在Python3是不好使用了那么肯定就解决不了我们遇到的问题

2、修改python3安装目录下的encoding，采用了下面的命令之后，就ok了

cd /usr/local/python3.6.5/encodings/ 
mv ascii.py ascii.py.bak           
cp utf_8.py ascii.py

金角大王说很有道理，要是不把编码问题吃透，那么它肯定会一直纠缠着你。所以在此小小的总结一下编码问题。


一、ACSII与编码

首先明确计算机只能读二进制0和1，我们处理字符问题的时候，需要将字符转换成计算机能够读懂的二进制。这里就需要将文字转为十进制，然后再将十进制转换为二进制，这样的话计算机就能理解了。由于计算机早期是美国发明的，最开始有127个字母（包括了一些在数字、大小写字母和一些符号）被编码到了计算机里面。所以我们从ASCII表一里面可以看出，A所对应的编码是65，z的编码是122。根据这个十进制，我们就能转为二进制，让计算机读懂了。


二、各类编码

虽然ASCII码能够表示英语，但是我们没有见到我们动感的中文、也没有见到牛日语、韩语、泰语等等。那么要让我们的计算机能够读懂不同的语言，各个国家肯定会编制自己所有的一张表，来将自己的语言给转换成二进制，让计算机给读懂，下面罗列一下一些国家的编码表:

出现了多国的编码之后，就出现了乱码的问题。为了解决乱码的问题，那么就出现了万国码(unicode)，Unicode编码将所有的语言编码到了一张表里面，那么这个表就能表示所有的语言了。Unicode 2-4字节 已经收录136690个字符，并还在一直不断扩张中。

但是这里Unicode编码是有问题的，也就是如果全部采用英文的话，用Unicode写的比ASCII要多占一倍的空间，无论是在传输上还是在空间上，都划不来。这里的意思就是Unicode的定长的编码，然后我们采用可变长的编码方式就能解决占用空间的问题。这个时候就出现了UTF（Unicode Transformation Format）。


三、编码的转换


四、各种报错

持续更新中....

参考资料：

1、https://blog.csdn.net/zzyzenith/article/details/84779537

2、https://www.cnblogs.com/alex3714/articles/7550940.html

3、http://www.cnblogs.com/linhaifeng/articles/5950339.html

