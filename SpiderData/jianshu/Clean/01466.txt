python是一门严格遵守缩进的语言，缩进的规则代表着程序的层级关系。我们来看一段代码。

class MyForm(Form):

value1 = StringField('value1')

value2 = StringField('value2')

value3 = StringField('value3')        #这行用的是Tab缩进

submit = SubmitField('Submit')

看起来这个value3变量和其他的变量没有什么不同，然而却出现了这样的报错——缩进错误。

value3 = StringField('value3')

IndentationError: unexpected indent

其实Python并没有强制要求你用Tab缩进或者用空格缩进，甚至空格按几个都没有强制要求，但是却绝对！绝对不能混用Tab和空格，那么这里，是不是空格和Tab的区别就显得很大了呢？

这个时候有的童鞋就要说了，我用PyCharm（或者其他IDE）怎么从来都没有出现这样的问题呢？

其实，很多IDE对Tab键做了各种各样的优化，其中有一条就是，将Tab键展开为为空格，也就是说，当你按下Tab的时候，IDE实际上帮你把一个「9」转换成了四个（或者八个）「32」。但是要注意，不是所有的IDE都帮你做了这样的工作！同理，对于好纯洁好不做作的编辑器Vim来说，肯定也不会帮你做这样的工作了。

既然Tab在不同的环境下展现不一样，而空格却永远都是一样的。对于一些细致排版缩进来说（比如说想把每一行的注释都对齐），用空格也更加精确。这样看起来，确实是用空格来写代码要好于用Tab呢。

空格代替Tab的好处：

空格在各种情况下代码都是你想要的样子。而 tab 仅仅当你与代码作者的 tab 尺寸设定为相同时，代码才好看。修改 tab 尺寸并不能解决这个问题，因为你很难做到每打开一个文件就修改一次 tab 尺寸，而每个人通常有不同的习惯（POSIX/Unix 标准的 tab 应当为 8 字符宽度，Linus 大神也规定 Linux 内核中所有代码的 tab 尺寸为 8）。如果存在行尾注释，则 tab 尺寸更加是必须设定为与作者相同，这就意味着你看不同的代码需要经常修改 tab 尺寸。我看过许多代码，其使用的 tab 尺寸有从 2,3,4,5,6,8,16 甚至 32 的，如果你使用的 tab 尺寸与作者不同，外观将很不理想。

靠谱的IDE都能解决前进后退增加减少缩进的问题，即便是四个空格，一个退格键也能全退了，所以在使用的方便性方面根本不存在问题。——如果抱怨删除调整还不能有效解决的，你需要研究一下你的编辑器了。实际上增加减少缩进在主流编辑器中都直接有快捷键，无论是 tab 还是空格还是退格都很少直接被用于缩进。

tab 是制表符而不是缩进符，正如在 html 页面中大量使用<table>进行布局是个不好的编程习惯一样，在编程中大量使用制表符布局通常也不是个好习惯。

一般情况下，团队开发都要制定一套编码规范， 在大部分团队中，使用4个空格代替Tab是大家默认的。所以非常建议大家使用空格代替Tab， 另外各个IDE（编辑器）都提供了tab自动转换空格的功能，只要大家设置一下，按下tab键就可以出现4个或者多个空格。

本文转自：https://www.py.cn/faq/python/13311.html

