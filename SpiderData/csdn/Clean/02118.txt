while循环

和 for 循环不同的另一种循环是 while 循环，while 循环不会迭代 list 或 tuple 的元素，而是根据表达式判断循环是否结束。

比如要从 0 开始打印不大于 N 的整数：

while循环每次先判断 x < N，如果为True，则执行循环体的代码块，否则，退出循环。

在循环体内，x = x + 1 会让 x 不断增加，最终因为 x < N 不成立而退出循环。

如果没有 x = x + 1 这一个语句，while循环在判断 x < N 时总是为True，就会无限循环下去，变成死循环，所以要特别留意while循环的退出条件。

试一试：

利用while循环计算100以内奇数的和。

break退出循环

用 for 循环或者 while 循环时，如果要在循环体内直接退出循环，可以使用 break 语句。

比如计算1至100的整数和，我们用while来实现：

咋一看， while True 就是一个死循环，但是在循环体内，我们还判断了 x > 100 条件成立时，用break语句退出循环，这样也可以实现循环的结束。

试一试：

利用 while True 无限循环配合 break 语句，计算 1 + 2 + 4 + 8 + 16 + ... 的前20项的和。

continue继续循环

在循环过程中，可以用break退出当前循环，还可以用continue跳过后续循环代码，继续下一次循环。

假设我们已经写好了利用for循环计算平均分的代码：

现在老师只想统计及格分数的平均分，就要把 x < 60 的分数剔除掉，这时，利用 continue，可以做到当 x < 60的时候，不继续执行循环体的后续代码，直接进入下一次循环：

当我们使用break呢？

break和continue的关系：

1、 都是跳出循环

2、 break是当条件满足时，跳出的是整个循环，也就是代码不在执行了，不管后面有没有适合的时间，都不在执行了，也就是终止代码的执行。

3、 continue是当条件满足时，跳出本次循环，继续下一次循环，并不会终止程序。

试一试：

对已有的计算 0 - 100 的while循环进行改造，通过增加 continue 语句，使得只计算奇数的和：

多重循环

在循环内部，还可以嵌套循环，我们来看一个例子：

x 每循环一次，y 就会循环 3 次，这样，我们可以打印出一个全排列：

试一试：

对100以内的两位数，请使用一个两重循环打印出所有十位数数字比个位数数字小的数，例如，23(2 < 3)

