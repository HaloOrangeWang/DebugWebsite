1）忘记在 if , elif , else , for , while , class ,def 声明末尾添加冒号（：）（导致 “SyntaxError ：invalid syntax”）

2)使用 = 而不是 ==（导致“SyntaxError: invalid syntax”）—— = 是赋值操作符而 == 是等于比较操作

3）错误的使用缩进量。（导致“IndentationError：unexpected indent”、“IndentationError：unindent does not match any outer indetation level”以及“IndentationError：expected an indented block”）——缩进增加只用在以：结束的语句之后，而之后必须恢复到之前的缩进格式。

4）在 for 循环语句中忘记调用 len() (导致“TypeError: "list" object cannot be interpreted as an integer”)——通常你想要通过索引来迭代一个list或者string的元素，这需要调用 range() 函数。要记得返回len 值而不是返回这个列表。eg:

spam = ["cat", "dog", "mouse"]for i inrange(spam):print(spam[i])

5）尝试修改string的值（导致“TypeError: "str" object does not support item assignment”）——string、tuple、int、float是一种不可变的数据类型；可变数据类型：列表list和字典dict。

python中的不可变数据类型，不允许变量的值发生变化，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象，内部会有一个引用计数来记录有多少个变量引用这个对象；可变数据类型，允许变量的值发生变化，即如果对变量进行append、+=等这种操作后，只是改变了变量的值，而不会新建一个对象，变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。eg:

错误：

spam = "I have a pet cat."spam[13] = "r"

print(spam)

正确：

spam = "I have a pet cat."spam= spam[:13] + "r" + spam[14:]print(spam)

6）尝试连接非字符串值与字符串（导致 “TypeError: Can"t convert "int" object to str implicitly”）

numEggs = 12

print("I have" + str(numEggs) + "eggs.")

或者：

numEggs= 12

print("I have %s eggs." % (numEggs))

7）在字符串首尾忘记加引号（导致“SyntaxError: EOL while scanning string literal”）

8）变量或者函数名拼写错误（导致“NameError: name "fooba" is not defined”）

9）方法名拼写错误（导致 “AttributeError: "str" object has no attribute "lowerr"”）

10）引用超过list最大索引（导致“IndexError: list index out of range”）

11）使用不存在的字典键值（导致“KeyError："spam’”）

spam = {"cat": "Zophie", "dog": "Basil", "mouse": "Whiskers"}print("The name of my pet zebra is" + spam["zebra"])

12）尝试使用Python关键字作为变量名（导致“SyntaxError：invalid syntax”）——Python3的关键字有：and, as, assert, break, class, continue, def, del, elif, else, except, False, finally, for, from, global, if, import, in, is, lambda, None, nonlocal, not, or, pass, raise, return, True, try, while, with, yield

class = "algebra"

13）在一个定义新变量中使用增值操作符（导致“NameError: name "foobar" is not defined”）——不要在声明变量时使用0或者空字符串作为初始值，这样使用自增操作符的一句spam += 1等于spam = spam + 1，这意味着spam需要指定一个有效的初始值。

14）在定义局部变量前在函数中使用局部变量（此时有与局部变量同名的全局变量存在）（导致“UnboundLocalError: local variable "foobar" referenced before assignment”）

在函数中使用局部变来那个而同时又存在同名全局变量时是很复杂的，使用规则是：如果在函数中定义了任何东西，如果它只是在函数中使用那它就是局部的，反之就是全局变量。

这意味着你不能在定义它之前把它当全局变量在函数中使用。

someVar = 42

defmyFunction():print(someVar)

someVar= 100myFunction()

15）尝试使用 range()创建整数列表（导致“TypeError: "range" object does not support item assignment”）——有时你想要得到一个有序的整数列表，所以 range() 看上去是生成此列表的不错方式。然而，你需要记住 range() 返回的是 “range object”，而不是实际的 list 值。（注意：在 Python 2 中 spam = range(10) 是能行的，因为在 Python 2 中 range() 返回的是list值，但是在 Python 3 中就会产生以上错误）

spam = list(range(10))

spam[4] = -1

16）忘记为方法的第一个参数添加self参数（导致“TypeError: myMethod() takes no arguments (1 given)”）

classFoo():defmyMethod():print("Hello!")

a=Foo()

a.myMethod()

