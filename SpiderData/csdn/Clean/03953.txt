原文链接：python异常处理

异常处理在工程文件中必不可少，今天就带大家彻底搞定异常处理。


异常处理

在python中我们使用try和except关键字来捕获异常：

try下写：不确定能不能正常执行的代码

except下写：如果try下的代码执行失败时要执行的代码


例1

要求用户输入整数：

try:
    # 不确定能不能正常执行的代码
    num = int(input("请输入一个数字："))
except:
    #  如果try下的代码执行失败时要执行的代码
    print("请输入一个正确的数字！")
    
输入：`z`
输出：请输入一个正确的数字！


错误类型捕获

在程序执行时，可能会报不同的错误。如果需要针对不同类型的异常做出不同的响应，就需要指定错误类型了：

try:
    #尝试执行的代码
    pass
except 错误类型1:
    #针对错误类型1，对应的代码处理
    pass
except(错误类型2,错误类型3):
    #针对错误类型2和3对应的代码处理
    pass
except Exception as result:
    # 除了123之外的错误 
    print("未知错误 %s" %result)


主动抛出异常raise

python中提供了Exception异常类。在开发时，如果满足特定业务的需求希望抛出异常时，可以创建一个Exception的对象，使用raise关键字抛出异常对象。


例5

提示用户设置密码，如果用户输入长度<8，则抛出异常：

def input_password():
    #1.提示用户输入密码
    result =input("请输入密码")
    #2.判断密码长度 >=8 ,返回用户输入的密码
    if len(result) >=8:
        return result
    #3.如果<8 主动抛出异常
    print("主动抛出异常！")
    #1>创建异常对象 -可以使用错误信息字符串作为参数
    ex =Exception("密码长度不够！")
    #2> 主动抛出异常
    raise ex
#提示用户输入密码
try:
    print(input_password())
except Exception as result:
    print(result)

恭喜结业，以上为Python全部的异常处理内容！但是还需要你在实际场景中多试多练，才能灵活应用！
 原文链接：python异常处理

