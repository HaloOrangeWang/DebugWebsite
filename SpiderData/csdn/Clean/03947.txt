写Python代码的小伙伴不可避免地会遇到代码执行错误和异常，这次就来详细且不失通俗地总结一下python中的错误和异常。

先抛出两个问题：

什么是Python错误和异常?

如何处理Python错误和异常?

1.语法错误可能是初学者最常遇到的，如下面熟悉的画面：

SyntaxError: invalid syntax语法错误又称解析错误，又有老哥会问什么是解析错误？简单来说是基本语法结构写错了，如：多任务写成一行、for循环没加‘:'等。如下：

多任务写成一行

for循环没加‘:'

上面示例可以看到，针对语法错误，python解析器会输出错误的那一行，并且在最先找到的错误的位置标记了一个箭头。

熟悉python语法后，可以避免语法错误，但是代码常会发生异常（Exception）。还是两个问题：

2.异常是什么？

异常和语法错误有什么区别呢？

关于异常，举个例子：

这行代码出现异常，因为Print的p应该小写：

python抛出异常类型：NameError，即名字错误。

其它异常的例子：

可以看到，异常有不同的类型，发生异常后，其类型名称会被打印出来。上述这些都是python内置的异常，用户也可以自定义异常，这里不做赘述。

3、try...except...语句

有python编程经验的人会知道，python里用try...except...语句来处理异常情况。

先看个异常处理的示例：

看，我们完美地捕捉到了程序中的异常。

结合上面的示例，处理异常的规则是：把执行的语句放在 try 代码块中，将错误处理器代码放置在 except 代码块中，except会引发ZeroDivisionError异常来提醒Coder，这段代码的错误是零不能作为被除数。

except后面也可以不添加异常类型，会捕获所有出现的异常：

我们可以把try...except...原理归纳为几个要点：

首先，执行 try 子句 （try 和 except 关键字之间的（多行）语句）

如果没有异常发生，则跳过 except 子句 并完成 try 语句的执行

如果在执行try 子句时发生了异常，则跳过该子句中剩下的部分。然后，如果异常的类型和 except 关键字后面的异常匹配，则执行 except 子句 ，然后继续执行 try 语句之后的代码

如果发生的异常和 except 子句中指定的异常不匹配，则将其传递到外部的 try 语句中；如果没有找到处理程序，则它是一个未处理异常，执行将停止并显示如上所示的消息

4、多个except子句

上面的try...except...语句只处理了一种异常，如果我想多匹配几个异常类型，怎么办呢？

这里就需要多个except子句来帮忙了，举个例子：

引发异常ZeroDivisionError

引发异常TypeError

上面我们用了两个except，匹配ZeroDivisionError和TypeError这两种异常，第一个代码捕捉到了ZeroDivisionError，第二段代码捕捉到了TypeError异常，一个都没有漏。

当然你还可以这样写：

也就是用一个except捕捉多个异常，异常类型放到except后面的元组里。

综上，对于多个except子句，可以总结为：

一个try语句可能有多个 except 子句，以指定不同异常的处理程序

最多会执行一个处理程序

处理程序只处理相应的 try 子句中发生的异常，而不处理同一try语句内其他处理程序中的异常

一个 except 子句可以将多个异常命名为带括号的元组

5、try...except Exception as e语句

我们常常会看看这样的写法：

try...exceptException as e其中的e代表什么意思呢？

再举个例子：

通过示例可以知道，e输出了异常类型。

也就是说，Exception匹配了所有异常，把异常名称赋给了e。

当然这里不一定非得是e，你可以取任何的变量名，只是约定俗称这样写罢了。

6、try...except...finally语句

try...except...finally语句可能并不那么常见，但它是非常有用的。

如果说，我想用python打开了一个txt文件，然后读取，写入，最后关闭文件对象。这是一套常规流程，如果我想捕捉代码过程中的异常，又要保证无论是否有异常，最后都必须要关闭文件。这时候就用到finally，看下面例子：

上面代码，既捕捉到了异常，最终又关闭了文件对象。

finaly的作用是，无论except是否捕捉到异常，

finally后面的代码都会执行，try获取了资源，

finally释放资源，保证了收尾工作。

7、with...语句

with...语句是try-finally语句的简写，可以替代try-finally的功能。

表达式open('poem.txt')返回是一个_io.TextIOWrapper 类型的变量赋给f。

在with语句块中就可以使用这个变量操作文件。

执行with这个结构之后，f会自动关闭，相当于自带了一个finally。

8、总结

本文详细且清晰地讲解了Python中错误和异常的概念及其处理方式，

通过具体案例展示try...except、try...finally、with...等句式的具体用法，

以上就是本文的全部内容，希望对大家的学习有所帮助，也希望大家多多支持我们。

本文标题: 新手常见Python错误及异常解决处理方案

本文地址: http://www.cppcns.com/jiaoben/python/321057.html

