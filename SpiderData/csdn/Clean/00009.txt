一、python的错误处理

在程序运行的过程中，如果发生了错误，可以事先约定返回一个错误代码，这样，就可以知道是否有错以及出错的原因。

在操作系统提供的调用中，返回错误码非常常见。比如打开文件的函数open()，成功时返回文件的描述符(就是一个整数)，出错时返回-1

用错误码来表示是否出错十分不便，因为函数本身应该返回的正常结果和错误码混在一起，造成调用者必须大量的代码来判断是否出错：

def foo():

r = somefunction()

if r == (-1):

return (-1)

return r

def bar():

r = foo()

if r == (-1):

print("Error")

else:

pass

一旦出错，还要一级一级上报，直到某个函数可以处理该错误(比如，给用户输出一个错误信息)

所以，高级语言通常都内置了一套try...except...finally...的错误处理机制，python也不例外。

try

让我们用一个例子来看看try的机制

try:

print("try....")

r = 10 / 0

print("result", r)

except ZeroDivisionError as e:

print("except:", e)

finally:

print("finally...")

print("END....")

当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出错，则后续代码不会继续执行

而是直接跳转至错误处理代码，即except语句块

执行完except后，如果有finally语句块，则执行finally语句块，至此，执行完毕。

上面的代码在计算10 / 0时 会产生一个除法运算错误：

try....

except: division by zero

finally...

END....

从输出可以看到，当错误发生时，后续语句print("result:", r)不会被执行，except由于捕获到ZeroDivisionError因此被执行。

最后，finally语句被执行。然后，程序继续按照流程往下走。

如果把除数0 变成2，则执行结果如下

try....

result 5.0

finally...

END....

由于没有错误发生，所以except语句块不会被执行，但是finally如果有则一定会被执行，当然finally也可以没有

你还可以猜测，错误应该有很多种类，日过发生了不同类型的错误，应该由不同的except语句块处理。

没错，可以有多个except来捕获不同类型的错误：

try:

print("try.....")

r = 10 / int("a")

print("result:", r)

except ValueError as e:

print("ValueError:", e)

except ZeroDivisionError as e:

print("ZeroDivisionError:", e)

finally:

print("finally...")

print("END...")

int()函数可能会抛出ValueError,所以我们用一个except捕获ValueError，用另一个except捕获ZeroDivisionError

此外，如果没有错误发生，可以再except语句块后面加一个else，当没有错误发生时，会自动执行else语句。

try:

print("try...")

r = 10 / int("2")

print("result:", r)

except ValueError as e:

print("ValueError:", e)

except ZeroDivisionError as e:

print("ZeroDivisionError:", e)

else:

print("No error!")

finally:

print("finally...")

print("END")

python的错误其实也是class，所有的错误类型都继承自BaseException,

所以在使用except时需要注意的是，它不但捕获该类型的错误，还把其子类也“一网打尽”。

比如：

try:

foo()

except ValueError as e:

print("ValueError")

except UnicodeError as e:

print("UnicodeError")

第二个except永远也捕获不到UnicodeError, 因为UnicodeError是ValueError的子类

如果有，也是被第一个except给捕获了。

python所有的错误都是BaseException类派生的。

所有常见的错误类型和继承关系看这里：

https://docs.python.org/3/library/exceptions.html#exception-hierarchy

使用try...exccept捕获错误还有一个巨大的好处，就是可以跨越多层调用，比如函数main()调用foo()

foo()调用bar()，结果bar()出错了，这时，只要main()捕获到了，就可以处理：

def foo(s):

return 10 / int(s)

def bar(s):

return foo(s) * 2

def main():

try:

bar("0")

except Exception as e:

print("Error:", e)

finally:

print("finally...")

也就是说，不需要在每个可能出错的地方去捕获异常，只要在合适的层次去捕获就可以了。

这样一来，就大大减少了写 try...except...finally的麻烦。

二、调用堆栈

如果错误没有被捕获，他就会一直往上抛，最后被python解释器捕获，打印一个错误信息，然后程序退出。

def foo(s):

return 10 / int(s)

def bar(s):

return foo(s) * 2

def main():

bar("0")

main()

执行结果为：

Traceback (most recent call last):

File "C:/Python36/test.py", line 10, in

main()

File "C:/Python36/test.py", line 8, in main

bar("0")

File "C:/Python36/test.py", line 5, in bar

return foo(s) * 2

File "C:/Python36/test.py", line 2, in foo

return 10 / int(s)

ZeroDivisionError: division by zero

出错并不可怕，可怕的时不知道哪里出错了。解读错误信息时定位错误的关键。

我们从上往下可以看到整个错误的调用函数链。

错误第一行：

Traceback (most recent call last):

这告诉我们的是错误的跟踪信息。

File "C:/Python36/test.py", line 10, in

main()

说明调用main()出错了，在代码文件test.py中第10行，但是原因是第8行：

File"C:/Python36/test.py", line8, in main

bar("0")

调用bar("0")出错了，在代码文件test.py中第8行，但原因是第5行：

File"C:/Python36/test.py", line5, in bar

return foo(s) * 2

调用return foo(s) * 2时出错了，在test.py中第5行，但原因是第2行

File "C:/Python36/test.py", line 2, in foo

return 10 / int(s)

ZeroDivisionError: division by zero

这时我们找到了源头，原来在第2行调用return 10 / int(s)出错了，错误为ZeroDivisionError

三、记录错误

如果不捕获错误，自然可以让python解释器来打印出错误堆栈，但是程序也被结束了。

既然我们能捕获错误，就可以把错误堆栈打印出来，然后分析错误原因，同时，让程序继续执行下去。

python内置的logging模块可以非常容易地记录错误信息：

import logging

def foo(s):

return 10 / int(s)

def bar(s):

return foo(s) * 2

def main():

try:

bar("0")

except Exception as e:

logging.exception(e)

main()

print("END")

输出结果为：

ERROR:root:division by zero

Traceback (most recent call last):

File "C:/Python36/test.py", line 12, in main

bar("0")

File "C:/Python36/test.py", line 8, in bar

return foo(s) * 2

File "C:/Python36/test.py", line 5, in foo

return 10 / int(s)

ZeroDivisionError: division by zero

END

同样是出错，但程序打印完错误信息后会继续执行，并正常退出。

通过配置，logging还可以把错误记录到日志文件里，方便事后排查。

四、抛出错误

因为错误是class，捕获一个错误就是捕获到该class的一个实例。

因此，错误并不是凭空产生的，而是有意创建并抛出的。

python的内置函数会抛出很多类型的错误，我们自己编写的函数也可以抛出错误。

如果要抛出错误，首先根据需要，可以定义一个错误的class，选择好继承关系，然后用raise语句抛出一个错误的实例：

class FooError(ValueError):

pass

def foo(s):

n = int(s)

if n == 0:

raise FooError("invalid value: %s" % s)

return 10 / n

foo("0")

输出结果：

Traceback (most recent call last):

File "C:/Python36/test.py", line 10, in

foo("0")

File "C:/Python36/test.py", line 7, in foo

raise FooError("invalid value: %s" % s)

FooError: invalid value: 0

只有在必要的时候才定义我们自己的错误类型。

如果可以选择python已有的内置错误类型(比如ValueError, TypeError),尽量使用python内置的错误类型。

最后，我们来看另一种错误处理方式：

def foo(s):

n = int(s)

if n == 0:

raise ValueError("invalid value: %s" % s)

return 10 / n

def bar():

try:

foo("0")

except ValueError as e:

print("ValieError")

raise

bar()

在bar()函数中，我们明明已经捕获了错误，但是，打印一个ValueError之后

又通过raise语句抛出去了。这不是有病吗

其实，这种错误处理方式不但没病，而且相当常见。

捕获错误目的只是记录一下，便于或许追踪。

但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理。

好比一个员工处理不了一个问题时，就把问题一直往上抛，最终会抛给CEO去解决。

注意：raise语句如果不带参数，就会把当前错误原样抛出。

此外，在except中raise一个Error，还可以改写错误类型

try:

/ 0

except ZeroDivisionError:

raise ValueError("do not input zero!")

输出结果：

Traceback (most recent call last):

File "C:/Python36/test.py", line 4, in

raise ValueError("do not input zero!")

ValueError: do not input zero!

只要是合理的转换逻辑就可以，但是，绝不应该把一个IOError转成毫不相干的valueError.

总结：

python内置的 try...except...finally 用来处理错误十分方便。

出错时，会分析错误信息并定位错误发生的代码位置才是关键的。

程序也可以主动抛出错误，让调用者来处理相应的错误。

但是应该在文档中写清楚可能会抛出哪些错误，以及错误产生的原因。

