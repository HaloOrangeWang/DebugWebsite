开发人员在编写程序时，难免会遇到错误，有的是编写人员疏忽造成的语法错误，有的是程序内部隐含逻辑问题造成的数据错误，还有的是程序运行时与系统的规则冲突造成的系统错误，等等。

总的来说，编写程序时遇到的错误可大致分为 2 类，分别为语法错误和运行时错误。

语法错误，也就是解析代码时出现的错误。当代码不符合 Python 语法规则时，Python解释器在解析时就会报出 SyntaxError 语法错误，与此同时还会明确指出最早探测到错误的语句。

语法错误多是开发者疏忽导致的，属于真正意义上的错误，是解释器无法容忍的，因此，只有将程序中的所有语法错误全部纠正，程序才能执行。

但是程序在执行时出现了非正常的情况，无法再执行下去，这就是运行时错误。运行时的错误涉及到异常的概念了。


一、异常的概念

程序在运行时，如果 Python 解释器遇到到一个错误，会停止程序的执行，并且提示一些错误信息，这就是异常。

默认情况下，出现异常，程序是要终止的。如果要避免程序退出，可以使用捕获异常的方式获取这个异常的名称，再通过其他的逻辑代码让程序继续运行，这种根据异常做出的逻辑处理叫作异常处理。

程序停止执行并且提示错误信息这个动作，我们通常称之为：抛出(raise)异常。

程序开发时，很难将所有的特殊情况都处理的面面俱到，通过异常捕获可以针对突发事件做集中的处理，从而保证程序的稳定性和健壮性。


二、捕获异常


1、简单的捕获异常语法

在程序开发中，如果对某些代码的执行不能确定是否正确，可以增加 try(尝试) 来捕获异常。

捕获异常最简单的语法格式：

try:
    尝试执行的代码
except:
    出现错误的处理

try except 语句的执行流程如下：

首先执行 try 中的代码块，里面是不确定是否能够正常执行的代码。如果执行过程中出现异常，系统会自动生成一个异常类型，并将该异常提交给 Python 解释器，此过程称为捕获异常。

首先执行 try 中的代码块，里面是不确定是否能够正常执行的代码。如果执行过程中出现异常，系统会自动生成一个异常类型，并将该异常提交给 Python 解释器，此过程称为捕获异常。

当 Python 解释器收到异常对象时，会寻找能处理该异常对象的 except 块，如果找到合适的 except 块，则把该异常对象交给该 except 块处理，这个过程被称为处理异常。如果 Python 解释器找不到处理异常的 except 块，则程序运行终止，Python 解释器也将退出。

当 Python 解释器收到异常对象时，会寻找能处理该异常对象的 except 块，如果找到合适的 except 块，则把该异常对象交给该 except 块处理，这个过程被称为处理异常。如果 Python 解释器找不到处理异常的 except 块，则程序运行终止，Python 解释器也将退出。

事实上，不管程序代码块是否处于 try 块中，甚至包括 except 块中的代码，只要执行该代码块时出现了异常，系统都会自动生成对应类型的异常。但是，如果此段程序没有用 try 包裹，又或者没有为该异常配置处理它的 except 块，则 Python 解释器将无法处理，程序就会停止运行；反之，如果程序发生的异常经 try 捕获并由 except 处理完成，则程序可以继续执行。

示例：要求用户输入整数。

try:
    # 提示用户输入一个数字
    num = int(input("请输入数字："))
except:
    print("请输入正确的数字")


2、错误类型捕获

在程序执行时，可能会遇到不同类型的异常，并且需要针对不同类型的异常，做出不同的响应，这个时候，就需要捕获错误类型了。

语法如下：

try:
    # 尝试执行的代码
    pass
except 错误类型1:
    # 针对错误类型1，对应的代码处理
    pass
except (错误类型2, 错误类型3):
    # 针对错误类型2 和 3，对应的代码处理
    pass
except Exception as result:
    print("未知错误 %s" % result)

当 Python 解释器抛出异常时，最后一行错误信息的第一个单词，就是错误类型。

一个 except 块可以同时处理多种异常。

[as …]：作为可选参数，表示给异常类型起一个别名，这样做的好处是方便在 except 块中调用异常类型。

示例：要求用户输入整数。

提示用户输入一个整数

使用 8 除以用户输入的整数并且输出

try:
    num = int(input("请输入整数："))
    result = 8 / num
    print(result)
except ValueError:
    print("请输入正确的整数")
except ZeroDivisionError:
    print("除 0 错误")


捕获未知错误

在开发时，要预判到所有可能出现的错误，还是有一定难度的。

如果希望程序无论出现任何错误，都不会因为 Python 解释器抛出异常而被终止，可以再增加一个 except。

语法如下：

except Exception as result:
    print("未知错误 %s" % result)


3、异常捕获的完整语法

在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：

try:
    # 尝试执行的代码
    pass
except 错误类型1:
    # 针对错误类型1，对应的代码处理
    pass
except 错误类型2:
    # 针对错误类型2，对应的代码处理
    pass
except (错误类型3, 错误类型4):
    # 针对错误类型3 和 4，对应的代码处理
    pass
except Exception as result:
    # 打印错误信息
    print(result)
else:
    # 没有异常才会执行的代码
    pass
finally:
    # 无论是否有异常，都会执行的代码
    print("无论是否有异常，都会执行的代码")

else 只有在没有异常时才会执行的代码。

finally 无论是否有异常，都会执行的代码。

示例：

try:
    num = int(input("请输入整数："))
    result = 8 / num
    print(result)
except ValueError:
    print("请输入正确的整数")
except ZeroDivisionError:
    print("除 0 错误")
except Exception as result:
    print("未知错误 %s" % result)
else:
    print("正常执行")
finally:
    print("执行完成，但是不保证正确")


三、异常的传递

异常的传递 —— 当函数/方法执行出现异常，会将异常传递给函数/方法的调用一方，如果传递到主程序，仍然没有异常处理，程序才会被终止。

在开发中，可以在主函数中增加异常捕获，而在主函数中调用的其他函数，只要出现异常，都会传递到主函数的异常捕获中，这样就不需要在代码中，增加大量的异常捕获，能够保证代码的整洁。

示例：

定义函数 demo1() 提示用户输入一个整数并且返回

定义函数 demo2() 调用 demo1()

在主程序中调用 demo2()

def demo1():
    return int(input("请输入一个整数："))

def demo2():
    return demo1()

try:
    print(demo2())
except ValueError:
    print("请输入正确的整数")
except Exception as result:
    print("未知错误 %s" % result)


四、抛出 raise 异常

在开发中，除了代码执行出错 Python 解释器会抛出异常之外，还可以根据应用程序特有的业务需求主动抛出异常。

示例：
 提示用户输入密码，如果长度少于 8，抛出异常。

当前函数只负责提示用户输入密码，如果密码长度不正确，需要其他的函数进行额外处理。

因此可以抛出异常，由其他需要处理的函数捕获异常。


抛出异常

Python 中提供了一个 Exception 异常类，在开发时，如果满足特定业务需求时，希望抛出异常，可以：

创建 一个 Exception 的 对象

使用 raise 关键字 抛出 异常对象

我们根据上面的需求来进行代码实现：

定义 input_password 函数，提示用户输入密码

如果用户输入长度 < 8，抛出异常

如果用户输入长度 >=8，返回输入的密码

def input_password():

# 1. 提示用户输入密码
    pwd = input("请输入密码：")

# 2. 判断密码长度，如果长度 >= 8，返回用户输入的密码
    if len(pwd) >= 8:
        return pwd

# 3. 密码长度不够，需要抛出异常
    # 1> 创建异常对象 - 使用异常的错误信息字符串作为参数
    ex = Exception("密码长度不够")

# 2> 抛出异常对象
    raise ex

try:
    user_pwd = input_password()
    print(user_pwd)
except Exception as result:
    print("发现错误：%s" % result)

