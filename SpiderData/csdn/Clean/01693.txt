目录

1、错误与异常

2、常见异常类型

3、Python异常处理

3.1、手动触发异常

3.2、异常嵌套

3.3、异常处理注意事项

3.4、在函数中，需要注意在try/except/finally使用return

3.5、关于异常处理的性能


1、错误与异常

🍓[什么是错误]🍓

语法错误（大小写拼写错误、括号不匹配等...）=> 不能正常执行

程序运行过程中，出现的意料之外的错误

如：打开的文件不存在、被除数为0、操作的数据类型不对、存储错误，互联网请求错 误


2、常见异常类型

NameError，尝试访问一个没有申明的变量

ZeroDivisionError，除数为0

SyntaxError，语法错误

IndentationError，缩进错误

KeyError，请求一个不存在的字典关键字

IndexError，索引超出序列范围

AttributeError，尝试访问未知的对象属性

ValeError，传给函数的参数类型不正确（例如：给int()函数传入字符串）

AssertionError，断言异常

这个常常用来做测试


3、Python异常处理

异常处理

在代码被解释执行的过程中可能会抛出异常。 那么也就是说,可能会发生,可能不会发生。对于这么不可预测的异常状态如何处理？

1：即使程序出错，也不想让程序终止

2：如果出错了，需要特殊处理

异常处理机制 try...except...

简单的异常处理的格式

except分支可以有多个

若是except捕获的错误与触发的异常不一致，程序就捕获不到异常，异常就会照常抛出

else子句：没有发生异常时执行

finally子句：不管异常有没有发生都执行，无论什么情况都会执行，即使前边有一个return


3.1、手动触发异常

有三种情况：

raise   直接使用，默认抛出RuntimeError

raise   异常类

raise   异常类（“异常信息”）


3.2、异常嵌套


3.3、异常处理注意事项

只执行最先匹配的一个except

如果父类异常在最前面,会吞噬所有子类异常

多except注意： 
只会匹配一个except 要先写子类异常再写父类异常 如果except捕获的错误与触发的错误不一致，程序会捕获不到

只会匹配一个except

要先写子类异常再写父类异常

如果except捕获的错误与触发的错误不一致，程序会捕获不到

🦖[几点建议]🦖

不建议使用异常来代替常规的检查，如if...else判断

不建议使用异常来代替常规的检查，如if...else判断

避免过多依赖于异常处理机制

避免过多依赖于异常处理机制

在必要的时候，可以手动引发异常（raise）=> 函数或方法

在必要的时候，可以手动引发异常（raise）=> 函数或方法


3.4、在函数中，需要注意在try/except/finally使用return

在finally中使用return，异常无法回溯

在函数中的try/except语句使用return后,仍然会执行finally中的内容 ​​​​​​​ 
  finally => 正常或异常都执行 return => 直接退出函数，返回值给主程序

finally => 正常或异常都执行

return => 直接退出函数，返回值给主程序


3.5、关于异常处理的性能

[root@fttswlp rough_book]# cat 1.py 
for i in range(10000000):
	try:
		pass
	except:
		pass

[root@fttswlp rough_book]# cat 2.py 
try:
	for i in range(10000000):
		pass
except:
	pass

这两个代码哪个性能更好呢？

[root@fttswlp rough_book]# time python 1.py

real	0m1.776s
user	0m0.351s
sys	0m1.424s
[root@fttswlp rough_book]# time python 2.py

real	0m0.448s
user	0m0.344s
sys	0m0.103s

因为"1.py"每循环一次就要try一次

