在Python的变量使用中，经常会遇到这样的错误:

local variable 'a' referenced before assignment

它的意思是：局部变量“a”在赋值前就被引用了。

比如运行下面的代码就会出现这样的问题：

a = 3

def Fuc():

print (a)

a = a + 1

Fuc()

​ 但是如果把 a = a + 1 这一句删除又不会出现上述问题了

a = 3

def Fuc():

print (a)

Fuc()

​ 原来，在Python中，a=3 定义了全局变量a，作用域从定义处到代码结束，在 a=3 以下的函数中是可以引用全局变量a的，但如果要修改函数中与全局变量同名的变量，则函数中的该变量就会变成局部变量，在修改之前对该变量的引用自然会出现未分配或未定义的错误了。

​ 如果确定要引用并修改全局变量必须加上global关键字

a = 3

def Fuc():

global a

print (a)

a=a+1

Fuc()

注意要领：哪个函数需要修改全局变量，在函数中声明一下即可。

​ 但是有一个函数特殊，那就是主函数：

a = 3

def Fuc():

global a

print (a) # 1

a = a + 1

if __name__ == "__main__":

print (a) # 2

a = a + 1

Fuc()

print (a) # 3

​输出如下（Python3环境下）：

三个print执行的顺序为：2, 1, 3 。可以看到主函数中并没有global声明变量a，仍然可以修改全局变量a。而在普通函数中，需要global声明变量a，才可以修改全局变量a。

以上就是本文的全部内容，希望对大家的学习有所帮助，也希望大家多多支持脚本之家。

