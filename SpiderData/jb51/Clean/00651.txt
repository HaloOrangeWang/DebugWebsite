问题描述

为了程序的正常运行，进行异常处理是有必要的，甚至于有时候，我们会主动的抛出异常，然后让程序进行异常捕获，再进行进一步的处理。但是，在开发的程序相对较大的过程中，我们不能一昧的进行try....except。而是要弄清楚到底抛出的是什么异常，同时，对于某些未知的异常，我们应该清楚的定位到到底是哪一行程序抛出的异常，针对这种情况，traceback库能极大的帮助我们。

解决方法

代码只需一行，即 print(traceback.format_exc()) 即可，这样即可打印详细的信息，这个详细信息比你捕捉完异常打印args详细多了，详细到具体第几行，如果你在一个大型程序里，需要定位错误，那么，traceback是十分好用的：

可以清楚的看到 ‘=' 号上方和下方打印的异常详细程度是不同的。

我们还可以通过traceback，获得异常的名称，用于根据异常名称进行异常捕获，例如，我们直接运行一段程序，并没有打印出来异常的名字，这样我们无法通过异常名对异常进行捕获，因此，我们可以通过traceback获得异常名：

如上图，我们无法获得异常名，下图展示traceback获得异常名：

从上图我们可以看到，我们无法通过args获取异常名，但是可以通过traceback获取

补充知识：python 输出完成异常信息

如下所示：

import traceback
 
try:
  1/0
exception:
  traceback.print_exc()

traceback.print_exc() 直接打印异常

traceback.format_exc()返回字符串

print_exc() 还可以接受file参数直接写入到一个文件

还可以将信息写入到文件

traceback.print_exc(file=open(‘error.txt','a+'))

以上这篇Python 输出详细的异常信息(traceback)方式就是小编分享给大家的全部内容了，希望能给大家一个参考，也希望大家多多支持脚本之家。

