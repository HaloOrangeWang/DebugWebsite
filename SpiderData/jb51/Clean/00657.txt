前言

有时候python自带异常不够用，如同java，python也可以自定义异常，并且可以手动抛出。注意，自定义异常只能由自己抛出。python解释器是不知道用户自定义异常是什么鬼的。

raise语句

主动抛出异常。

格式：

主动抛出异常终止程序

raise 异常名称(‘异常描述')

raise RuntimeError('testError')

主动抛出这个异常，并加以解释。

自定义异常

python的异常分为两种.

1、内建异常，就是python自己定义的异常。

2、不够用，用户自定义异常，

首先看看python的异常继承树

我们可以看到python的异常有个大基类。然后继承的是Exception。所以我们自定义类也必须继承Exception。

#最简单的自定义异常
class FError(Exception):
  pass

抛出异常、用try-except抛出

try:
  raise FError("自定义异常")
except FError as e:
  print(e)

在这里给一个简单的自定义异常类模版。

class CustomError(Exception):
  def __init__(self,ErrorInfo):
    super().__init__(self) #初始化父类
    self.errorinfo=ErrorInfo
  def __str__(self):
    return self.errorinfo

if __name__ == '__main__':
  try:
    raise CustomError('客户异常')
  except CustomError as e:
    print(e)

补充知识：Python自定义异常及常见异常类型

对于try…except…else…finally

def self_error(type_list):
 """异常处理函数
 传入一个可迭代对象，处理参数传入错误情况
 :paramtype_list:一个可迭代对象
 """
 try:
 for i in type_list:
  print(i)
 except:
 print("不是可迭代对象")
 else:
 print("没有发生错误")
 finally:
 print("程序运行结束")
self_error("abc")
"""
a
b
c
没有发生错误
程序运行结束"""
self_error(2)
"""不是可迭代对象
程序运行结束"""

由程序可以看出如果try部分顺利执行，则会执行else部分，如果try部分出现错误则会执行except部分，但是两种情况最后都输出了finally部分。当然，else和finally部分是可以省略的。我们可以自定义输出错误类型，需要用到raise函数。

def self_error(type_num):
  """异常处理函数
  
  自定义异常函数，用于抛出异常
  :paramtype_num:用于判断是否抛出异常的值
  :return 异常信息 
  """
  if type_num<10:
   raise ValueError("取值小于10")
  else：
   return 200
 if __name__=="__main__":
 self_error(11) #200
 self_error(9) #ValueError: 取值小于10

raise抛出异常只适用于python的标准异常类

异常名称 描述

ArithmeticError 所有数值计算错误的基类

AssertionError 断言语句失败

AttributeError 对象没有这个属性

BaseException 所有异常的基类

DeprecationWarning 关于被弃用的特征的警告

EnvironmentError 操作系统错误的基类

EOFError 没有内建输入,到达EOF 标记

Exception 常规错误的基类

FloatingPointError 浮点计算错误

FutureWarning 关于构造将来语义会有改变的警告

GeneratorExit 生成器(generator)发生异常来通知退出

ImportError 导入模块/对象失败

IndentationError 缩进错误

IndexError 序列中没有没有此索引(index)

IOError 输入/输出操作失败

KeyboardInterrupt 用户中断执行(通常是输入^C)

KeyboardInterrupt 用户中断执行(通常是输入^C)

KeyError 映射中没有这个键

LookupError 无效数据查询的基类

MemoryError 内存溢出错误(对于Python 解释器不是致命的)

NameError 未声明/初始化对象 (没有属性)

NotImplementedError 尚未实现的方法

OSError 操作系统错误

OverflowError 数值运算超出最大限制

OverflowWarning 旧的关于自动提升为长整型(long)的警告

PendingDeprecationWarning 关于特性将会被废弃的警告

ReferenceError 弱引用(Weak reference)试图访问已经垃圾回收了的对象

RuntimeError 一般的运行时错误

RuntimeWarning 可疑的运行时行为(runtime behavior)的警告

StandardError 所有的内建标准异常的基类

StopIteration 迭代器没有更多的值

SyntaxError Python 语法错误

SyntaxWarning 可疑的语法的警告

SystemError 一般的解释器系统错误

SystemExit 解释器请求退出

SystemExit Python 解释器请求退出

TabError Tab 和空格混用

TypeError 对类型无效的操作

UnboundLocalError 访问未初始化的本地变量

UnicodeDecodeError Unicode 解码时的错误

UnicodeEncodeError Unicode 编码时错误

UnicodeError Unicode 相关的错误

UnicodeTranslateError Unicode 转换时错误

UserWarning 用户代码生成的警告

ValueError 传入无效的参数

Warning 警告的基类

WindowsError 系统调用失败

ZeroDivisionError 除(或取模)零 (所有数据类型)

以上为个人经验，希望能给大家一个参考，也希望大家多多支持脚本之家。如有错误或未考虑完全的地方，望不吝赐教。

