目录异常异常介绍异常种类异常处理什么是异常处理为什么要进行异常处理基本语法多分支异常万能异常elsetry...finally...异常的传递自定义异常

目录

异常异常介绍异常种类

异常介绍

异常种类

异常处理什么是异常处理为什么要进行异常处理基本语法多分支异常万能异常elsetry...finally...异常的传递自定义异常

什么是异常处理

为什么要进行异常处理

基本语法多分支异常万能异常elsetry...finally...异常的传递自定义异常

多分支异常

万能异常

else

try...finally...

异常的传递

自定义异常


异常


异常介绍

异常就是程序运行时发生错误的信号，在python中,错误触发的异常如下：


异常种类

在python中不同的异常可以用不同的类型（python中统一了类与类型，类型即类）去标识，不同的类对象标识不同的异常，一个异常标识一种错误。

常用异常：

其它异常：


异常处理


什么是异常处理

python解释器检测到错误，触发异常（也允许程序员自己触发异常）

程序员编写特定的代码，专门用来捕捉这个异常（这段代码与程序逻辑无关，与异常处理有关）

如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃，这就是异常处理.


为什么要进行异常处理

python解析器去执行程序，检测到了一个错误时，触发异常，异常触发后且没被处理的情况下，程序就在当前异常处终止，后面的代码不会运行，谁会去用一个运行着突然就崩溃的软件。

所以你必须提供一种异常处理机制来增强你程序的健壮性与容错性


基本语法

异常类只能用来处理指定的异常情况，如果非指定异常则无法处理。


多分支异常


万能异常

在python的异常中，有一个万能异常：Exception，他可以捕获任意异常

多分支+Exception：

主动触发异常


else

咱们应该对else并不陌生，在if中，它的作用是当条件不满足时执行的实行；同样在try...except...中也是如此，即如果没有捕获到异常，那么就执行else中的事情

运行结果如下：


try...finally...

try...finally...语句用来表达这样的情况：在程序中，如果一个段代码必须要执行，即无论异常是否产生都要执行，那么此时就需要使用finally。 比如文件关闭，释放锁，把数据库连接返还给连接池等


异常的传递

try嵌套：

函数嵌套调用：

运行结果：

总结：

如果try嵌套，那么如果里面的try没有捕获到这个异常，那么外面的try会接收到这个异常，然后进行处理，如果外边的try依然没有捕获到，那么再进行传递。。。

如果一个异常是在一个函数中产生的，例如函数A---->函数B---->函数C,而异常是在函数C中产生的，那么如果函数C中没有对这个异常进行处理，那么这个异常会传递到函数B中，如果函数B有异常处理那么就会按照函数B的处理方式进行执行；如果函数B也没有异常处理，那么这个异常会继续传递，以此类推。。。如果所有的函数都没有处理，那么此时就会进行异常的默认处理，即通常见到的那样

注意观察上图中，当调用test3函数时，在test1函数内部产生了异常，此异常被传递到test3函数中完成了异常处理，而当异常处理完后，并没有返回到函数test1中进行执行，而是在函数test3中继续执行


自定义异常

