前言：本文主要介绍python中异常的处理及断言，包括异常类型、异常捕获、主动跑出异常和断言。


一、异常类型介绍

什么是异常？异常即是一个事件，该事件会在程序执行过程中发生，会影响程序的正常执行，一般情况下，在python无法正常处理程序时就会发生一个异常。异常是python对象，表示一个错误。当python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。

在python 中，所有的异常都是派生自BaseException类的实例，BaseException是所有异常的基类，下面四种是最常见的异常：

SystemExit              解释器请求退出

KeyboardInterrupt      用户中断执行(通常是输入^C)

GeneratorExit            生成器(generator)发生异常来通知退出

Exception               常规错误的基类

我们需要重点掌握Exception类，一般因代码引起的错误，是我们可以控制的，其他异常基类我们了解即可，常见的Exception类异常类型举例如下：

AttributeError：属性错误，特性引用和赋值失败时会引发属性错误

NameError：试图访问的变量名不存在

SyntaxError：语法错误，代码形式错误

IOError：一般常见于打开不存在文件时会引发IOError错误，也可以解理为输出输入错误

KeyError：使用了映射中不存在的关键字（键）时引发的关键字错误

IndexError：索引错误，使用的索引不存在，常索引超出序列范围，什么是索引

TypeError：类型错误，内建操作或是函数应于在了错误类型的对象时会引发类型错误

ZeroDivisonError：除数为0，在用除法操作时，第二个参数为0时引发了该错误

ValueError：值错误，传给对象的参数类型不正确，像是给int()函数传入了字符串数据类型的参数。

还有更多的异常类型，有兴趣的可以查阅官网文档或者百度查询。


二、异常捕获


1.try/except语法格式

捕捉异常可以使用try/except语句，如果你不想在异常发生时结束你的程序，只需在try里捕获它，使用except在错误发生后运行处理动作。语法格式如下：（注意：except中指定异常类型，可以指定一个也可以指定多个，也可以不指定，不指定时默认捕获所有Exception类型的异常）

try:

　　可能出现异常的代码

except 异常类型:

　　捕获到异常之后的处理方案

上述例子中因为b没有被定义，在打印时无法找到b，因此抛出了一个NameError导致后面的代码无法继续执行，那么我们来捕获一下这个错误

运行结果：

C:\software\python\python.exe D:/learn/python18_http_request/exercise/test.py
这里有一个异常！
这是一个测试异常的文本

Process finished with exit code 0


2.异常处理中的else和finally

在try/except语句中可以使用else和finally，try语句里的代码没有异常才会执行else里的语句，而finally语句是不管try里有没有异常它都会执行

运行结果：


三、主动抛出异常

异常捕获后为什么还要主动去抛出一个异常呢？这是为了方便我们知道出现异常的具体情况，我们还可以自定义异常

语法格式：raise 异常类型(异常信息)

运行结果：

在自动化测试中，我们只需要掌握如何捕获异常如何抛出异常即可，自定义异常这里就不多作解释，有兴趣的可以自定百度。


四、断言assert

什么是断言？其实assert断言就是用于判断一个表达式，在表达式条件为 false 的时候触发断言异常，断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况，例如我们的代码只能在a>8时运行，可以先判断当前是否符合条件。语法格式如下：

assert 表达式，提示信息　　（也可以没有提示信息）

# assert：断言
res1 = {'code': 1, 'msg': '登陆成功'}
res2 = {'code': 0, 'msg': '登陆失败'}

# 加一个断言，判断结果是否如预期，如果与预期不一致，会报出断言异常并打印提示信息
assert res1 == res2, '该用例不通过！'

运行结果：

我们也可以用try/except来捕获这个断言异常：

# assert：断言
res1 = {'code': 1, 'msg': '登陆成功'}
res2 = {'code': 0, 'msg': '登陆失败'}

运行结果：

