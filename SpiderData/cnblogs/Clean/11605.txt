
迭代器和异常处理

目录迭代器和异常处理1. 可迭代对象1.1 可迭代对象2.迭代器对象3. for循环本质4. 异常处理4.1 什么是异常4.2 异常三个重要组成部分4.3 异常的种类4.4 常见异常类型4.5  异常处理基本语法结构4.5.2 异常使用else4.5.3 异常使用finally4.5.4 断言assert4.5.5 自定义异常raise4.5.6 示例:用while使用迭代器模拟for4.5.7 自定义异常4.6 使用异常处理规则

目录

迭代器和异常处理1. 可迭代对象1.1 可迭代对象2.迭代器对象3. for循环本质4. 异常处理4.1 什么是异常4.2 异常三个重要组成部分4.3 异常的种类4.4 常见异常类型4.5  异常处理基本语法结构4.5.2 异常使用else4.5.3 异常使用finally4.5.4 断言assert4.5.5 自定义异常raise4.5.6 示例:用while使用迭代器模拟for4.5.7 自定义异常4.6 使用异常处理规则

1. 可迭代对象1.1 可迭代对象2.迭代器对象3. for循环本质4. 异常处理4.1 什么是异常4.2 异常三个重要组成部分4.3 异常的种类4.4 常见异常类型4.5  异常处理基本语法结构4.5.2 异常使用else4.5.3 异常使用finally4.5.4 断言assert4.5.5 自定义异常raise4.5.6 示例:用while使用迭代器模拟for4.5.7 自定义异常4.6 使用异常处理规则

1. 可迭代对象1.1 可迭代对象

1.1 可迭代对象

2.迭代器对象

3. for循环本质

4. 异常处理4.1 什么是异常4.2 异常三个重要组成部分4.3 异常的种类4.4 常见异常类型4.5  异常处理基本语法结构4.5.2 异常使用else4.5.3 异常使用finally4.5.4 断言assert4.5.5 自定义异常raise4.5.6 示例:用while使用迭代器模拟for4.5.7 自定义异常4.6 使用异常处理规则

4.1 什么是异常

4.2 异常三个重要组成部分

4.3 异常的种类

4.4 常见异常类型

4.5  异常处理基本语法结构4.5.2 异常使用else4.5.3 异常使用finally4.5.4 断言assert4.5.5 自定义异常raise4.5.6 示例:用while使用迭代器模拟for4.5.7 自定义异常

4.5.2 异常使用else

4.5.3 异常使用finally

4.5.4 断言assert

4.5.5 自定义异常raise

4.5.6 示例:用while使用迭代器模拟for

4.5.7 自定义异常

4.6 使用异常处理规则


1. 可迭代对象

迭代:迭代即更新换代,每次的更新都必须依赖于上一次的结果.

每一次对过程的重复称为一次“迭代”,每一次迭代得到的结果会被用来作为下一次迭代的初始值.

在python中可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。

迭代其实给我们提供了一种不依赖索引取值的方式


1.1 可迭代对象

内置有__iter__方法的都称之为可迭代对象.

针对双下滑线开头 双下滑线结尾的方法 最为专业标准的读法为

双下 方法名

查找哪些类型是可迭代对象

可迭代对象为：字符串、列表、元组、字典、集合、文件对象

其实__iter__()有更简单的调用方式：iter()


2.迭代器对象

现在我们知道可迭代对象为：字符串、列表、元组、字典、集合、文件对象

但这些是可迭代对象，但不一定是迭代器对象。

因为，迭代器是：即含有__iter__方法又含有__next__方法的才叫迭代器。

查看可迭代对象是否为迭代器：

可迭代对象字符串、列表、元组、字典、集合、文件对象中只有文件对象是迭代器。

文件对象本身即是可迭代对象又是迭代器对象

虽然字符串、列表、元组、字典、集合不是迭代器，但是可以使用__iter__方法转换成迭代器

迭代器对象执行__next__方法其实就是在迭代取值，但是它不知道序列的长度,所以会__next__会一直取，直到没有数据时抛出StopIteration错误。

迭代器对象无论执行多少次__iter__方法,还是迭代器对象(本身)

练习


3. for循环本质

循环打印出列表中每个元素, 但是不能使用for循环

其实for循环本质就是使用迭代器

for循环内部原理


4. 异常处理


4.1 什么是异常

代码运行出错会导致异常 异常发生后如果没有解决方案则会到底整个程序结束


4.2 异常三个重要组成部分

traceback

翻到最下面从下往上的第一个蓝色字体鼠标左键点击即可跳转到错误的代码所在的行

traceback

翻到最下面从下往上的第一个蓝色字体鼠标左键点击即可跳转到错误的代码所在的行

xxxError
异常的类型

xxxError

异常的类型

异常类型冒号后面的内容
异常的详细原因(仔细看完之后可能就会找到解决的方法)

异常类型冒号后面的内容

异常的详细原因(仔细看完之后可能就会找到解决的方法)


4.3 异常的种类

语法错误

逻辑错误


4.4 常见异常类型

[Python官方异常列表:][https://docs.python.org/3/library/exceptions.html#exception-hierarchy ]

https://docs.python.org/3/library/exceptions.html#exception-hierarchy


4.5  异常处理基本语法结构

格式:

示例:

使用异常处理时，except可以写多个，写多个会比较麻烦，可以使用Exception它能捕获各种异常

使用异常处理，循环打印出列表中每个元素, 但是不使用for循环


4.5.2 异常使用else

异常也可以使用else

所以else是被监测的代码不报错的时候执行。


4.5.3 异常使用finally

finally是无论被监测的代码是否报错最终都会执行


4.5.4 断言assert

断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。

用于判断一个表达式，在表达式条件为 false 的时候触发异常。


4.5.5 自定义异常raise

raise 语句抛出一个指定的异常。

raise 唯一的一个参数指定了要被抛出的异常。它必须是一个异常的实例或者是异常的类

raise的错误类型可以自己定义，或者直接写Exception, 这个自己定义的类型要在python错误类型中。


4.5.6 示例:用while使用迭代器模拟for


4.5.7 自定义异常

我们自己可以通过创建新的异常类命名自己的异常，论是以直接还是间接的方式，异常都应从 Exception 类派生，也有从BaseException类派生，BaseException 是为系统退出异常而保留的，而且Exception是继承了BaseException`.


4.6 使用异常处理规则

有可能会出现错误的代码才需要被监测

被监测的代码一定要越少越好

异常捕获使用频率越低越好

