
异常处理


1.什么是异常:

代码发生错误之后,程序就中断了


2.什么是异常处理

当代码出现异常时,通过某种方式不让程序中断,合理地跳过去


3.为什么要有异常处理

增强用户体验感

使代码更有健壮性,容错性


4.异常处理的两种方式

if else 只能处理简单的异常,如果需要考虑的方面比较多,不适合

利用try的方式进行异常处理


5.什么时候用万能处理,什么时候用多分支

如果对错误信息不关心,只是想要排除错误让程序继续运行,用万能

如果对错误信息要进行明确的分流,让程序多元化开发,用分支


6.错误分类

语法错误:这种错误，根本过不了python解释器的语法检测，必须在程序执行前就改正

逻辑错误


7.具体举例分析


7.1语法错误


7.2逻辑错误


7.3异常种类


7.4 if 判断处理异常


7.5 异常处理的"私人订制"  --try


7.5.1 基本结构

try:
	被检测的正常代码
except 异常类型:
	try中一旦检测到异常,就执行这个位置逻辑

f = open("text")
g = (line.strip() for line in f)

for line in g:
    print(line)
else:
    f.close()


7.5.2 异常类只能处理指定的异常情况


7.5.3 多分支


7.5.4 万能异常捕捉


7.5.5 多分支 加 万能处理


7.5.6 主动抛出异常


7.5.7 try except else finally

except 必须依赖于try, else必须依赖于except和try  finally只是依赖于try

一定注意执行顺序   在return结束函数之前,执行finally代码.


7.5.8 断言:展现一种强硬的态度


7.5.9 自定义异常  python中给你提供的错误类型很多,但是不是全部的错误

