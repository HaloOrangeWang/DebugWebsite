
异常处理

异常和错误

错误分类

语法错误（必须在程序运行前改正）

逻辑错误
# 超出索引范围
li = [1,2,3]
print(li[10])
# 输入错误或者输入非法
num = input('请输入整数：')
int(num)

异常和错误

错误分类

语法错误（必须在程序运行前改正）

逻辑错误
# 超出索引范围
li = [1,2,3]
print(li[10])
# 输入错误或者输入非法
num = input('请输入整数：')
int(num)

错误分类

语法错误（必须在程序运行前改正）

语法错误（必须在程序运行前改正）

逻辑错误
# 超出索引范围
li = [1,2,3]
print(li[10])
# 输入错误或者输入非法
num = input('请输入整数：')
int(num)

逻辑错误

异常
异常就是程序运行时发生错误的信号，异常发生之后代码就执行不了了
种类：在python中不同的异常可以用不同的类型（python中统一了类与类型，类型即类）去标识，不同的类对象标识不同的异常，一个异常标识一种错误
常见异常如下：
AttributeError # 试图访问一个对象没有的树形，比如foo.x，但是foo没有属性x
IOError # 输入/输出异常；基本上是无法打开文件
ImportError # 无法引入模块或包；基本上是路径问题或名称错误
IndentationError # 语法错误（的子类） ；代码没有正确对齐
IndexError # 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[5]
KeyError # 试图访问字典里不存在的键
KeyboardInterrupt # Ctrl+C被按下
NameError # 使用一个还未被赋予对象的变量
SyntaxError # Python代码非法，代码不能编译(个人认为这是语法错误，写错了）
TypeError # 传入对象类型与要求的不符合
UnboundLocalError # 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，导致你以为正在访问它
ValueError # 传入一个调用者不期望的值，即使值的类型是正确的

其他异常：
ArithmeticError
AssertionError
AttributeError
BaseException
BufferError
BytesWarning
DeprecationWarning
EnvironmentError
EOFError
Exception
FloatingPointError
FutureWarning
GeneratorExit
ImportError
ImportWarning
IndentationError
IndexError
IOError
KeyboardInterrupt
KeyError
LookupError
MemoryError
NameError
NotImplementedError
OSError
OverflowError
PendingDeprecationWarning
ReferenceError
RuntimeError
RuntimeWarning
StandardError
StopIteration
SyntaxError
SyntaxWarning
SystemError
SystemExit
TabError
TypeError
UnboundLocalError
UnicodeDecodeError
UnicodeEncodeError
UnicodeError
UnicodeTranslateError
UnicodeWarning
UserWarning
ValueError
Warning
ZeroDivisionError

异常

异常就是程序运行时发生错误的信号，异常发生之后代码就执行不了了

种类：在python中不同的异常可以用不同的类型（python中统一了类与类型，类型即类）去标识，不同的类对象标识不同的异常，一个异常标识一种错误

常见异常如下：

其他异常：

异常处理
python解释器检测到错误，触发异常（也允许程序员自己触发异常）
程序员编写特定的代码，专门用来捕捉这个异常（这段代码与程序逻辑无关，与异常处理有关）
如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃。

使用if判断
num1=input('>>: ') #输入一个字符串试试
if num1.isdigit():
    int(num1) #我们的正统程序放到了这里,其余的都属于异常处理范畴
elif num1.isspace():
    print('输入的是空格,就执行我这里的逻辑')
elif len(num1) == 0:
    print('输入的是空,就执行我这里的逻辑')
else:
    print('其他情情况,执行我这里的逻辑')

总结：
1.if判断式的异常处理只能针对某一段代码，对于不同的代码段的相同类型的错误你需要写重复的if来进行处理。
2.在你的程序中频繁的写与程序本身无关，与异常处理有关的if，会使得你的代码可读性极其的差
3.if是可以解决异常的，只是存在1,2的问题，所以，千万不要妄下定论if不能用来异常处理。

python异常处理

try...except...
li = [1,2,3,4,5]
obj = iter(li)
while 1:
    try:
        print(next(obj))
    except StopIteration:
        break
# 当next(obj)取到最后时会报错，except会在错误出现时执行break

异常处理

python解释器检测到错误，触发异常（也允许程序员自己触发异常）

程序员编写特定的代码，专门用来捕捉这个异常（这段代码与程序逻辑无关，与异常处理有关）

如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃。

使用if判断
num1=input('>>: ') #输入一个字符串试试
if num1.isdigit():
    int(num1) #我们的正统程序放到了这里,其余的都属于异常处理范畴
elif num1.isspace():
    print('输入的是空格,就执行我这里的逻辑')
elif len(num1) == 0:
    print('输入的是空,就执行我这里的逻辑')
else:
    print('其他情情况,执行我这里的逻辑')

总结：
1.if判断式的异常处理只能针对某一段代码，对于不同的代码段的相同类型的错误你需要写重复的if来进行处理。
2.在你的程序中频繁的写与程序本身无关，与异常处理有关的if，会使得你的代码可读性极其的差
3.if是可以解决异常的，只是存在1,2的问题，所以，千万不要妄下定论if不能用来异常处理。

使用if判断

总结：

1.if判断式的异常处理只能针对某一段代码，对于不同的代码段的相同类型的错误你需要写重复的if来进行处理。

2.在你的程序中频繁的写与程序本身无关，与异常处理有关的if，会使得你的代码可读性极其的差

3.if是可以解决异常的，只是存在1,2的问题，所以，千万不要妄下定论if不能用来异常处理。

python异常处理

try...except...
li = [1,2,3,4,5]
obj = iter(li)
while 1:
    try:
        print(next(obj))
    except StopIteration:
        break
# 当next(obj)取到最后时会报错，except会在错误出现时执行break

python异常处理

try...except...
li = [1,2,3,4,5]
obj = iter(li)
while 1:
    try:
        print(next(obj))
    except StopIteration:
        break
# 当next(obj)取到最后时会报错，except会在错误出现时执行break

try...except...

异常类只能用来处理指定异常
s1 = 'hello'
try:
    int(s1)
except IndexError as e:	# 异常类与出现异常不一致，为捕获到异常，程序报错
    print(e)

异常类只能用来处理指定异常

多分支
s1 = 'hello'
try:
    int(s1)
except IndexError as e:
    print(e)
except IndexError as e:
    print(e)
except IndecError as e:
    print(e)

多分支

万能异常Exception

如果你想要的效果是，无论出现什么异常，我们统一丢弃，或者使用同一段代码逻辑去处理他们，那么只有一个Exception就足够了。
s1 = 'hello'
try:
    int(s1)
except Exception,e:
    '丢弃或者执行其他逻辑'
    print(e)

万能异常Exception

如果你想要的效果是，无论出现什么异常，我们统一丢弃，或者使用同一段代码逻辑去处理他们，那么只有一个Exception就足够了。
s1 = 'hello'
try:
    int(s1)
except Exception,e:
    '丢弃或者执行其他逻辑'
    print(e)

如果你想要的效果是，无论出现什么异常，我们统一丢弃，或者使用同一段代码逻辑去处理他们，那么只有一个Exception就足够了。

如果你想要的效果是，对于不同的异常我们需要定制不同的处理逻辑，那就需要用到多分支了。
s1 = 'hello'
try:
    int(s1)
except IndexError as e:
    print(e)
except KeyError as e:
    print(e)
except ValueError as e:
    print(e)

s1 = 'hello'
try:
    int(s1)
except IndexError as e:
    print(e)
except KeyError as e:
    print(e)
except ValueError as e:
    print(e)
except Exception as e:
    print(e)

如果你想要的效果是，对于不同的异常我们需要定制不同的处理逻辑，那就需要用到多分支了。

异常的其他结构
s1 = 'hello'
try:
    int(s1)
except IndexError as e:
    print(e)
except KeyError as e:
    print(e)
except ValueError as e:
    print(e)
else:
    print('try内代码没有异常则执行')
finally:
    print(' 在整个程序终止之前,执行finally')

finally使用情况：
# 1.文件操作
f = open('register',mode='w')
f.write('123456')
f.write('123456')
f.write('123456')
li = [1,2,3]
print(li[10])
f.write('123456')
finally:
    f.close()
# 数据库：连接数据库引擎
# 在函数中：结束函数之前，先要执行finally语句
def func():
    try:
        a = 1
        b = 2
        return a+b
    finally:
        print(666)
func()	# 666

异常的其他结构

finally使用情况：

主动抛出异常
try:
    raise TypeError('类型错误')
except Exception as e:
    print(e)

主动抛出异常

自定义异常
class EvaException(BaseException):
    def __init__(self,msg):
        self.msg=msg
    def __str__(self):
        return self.msg

try:
    raise EvaException('类型错误')
except EvaException as e:
    print(e)

自定义异常

断言
# assert 条件		源码上assert
assert 1==2	# 条件不成立直接报错，后面程序不执行
print(111)
print(222)
print(333)

断言

try..except的方式比较if的方式的好处
try..except这种异常处理机制可以让程序在不牺牲可读性的前提下增强健壮性和容错性
使用try..except的方式
1：把错误处理和真正的工作分开来

2：代码更易组织，更清晰，复杂的工作任务更容易实现；

3：毫无疑问，更安全了，不至于由于一些小的疏忽而使程序意外崩溃了；

try..except的方式比较if的方式的好处

try..except这种异常处理机制可以让程序在不牺牲可读性的前提下增强健壮性和容错性

使用try..except的方式

1：把错误处理和真正的工作分开来

2：代码更易组织，更清晰，复杂的工作任务更容易实现；

3：毫无疑问，更安全了，不至于由于一些小的疏忽而使程序意外崩溃了；

