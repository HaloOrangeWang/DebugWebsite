更新ing

常见的报错类型和简析、异常处理、其他类型的报错（异常）类型简介、自定义异常

常见的报错类型和简析：

未指定造成的局部错误：局部变量在被使用前未初始化或未给予相应指定。

程序中的错误可以大致分为语法错误和逻辑错误两大类。语法错误是指，编写的程序违反了python的基本语法规则，这样的错误会在解析过程中，直接报错。逻辑错误，则是整个程序的设计错误。

异常处理：

如果错误发生的条件是可以预知的，最好是用if 条件进行处理，尽量不用异常处理。这主要是因为异常处理会严重影响程序整体的可读性。

当程序发成的错误条件是不可知的，则可以通过添加异常处理机制。

执行异常处理的目的：捕捉程序整体的运行错误信息，按指定的方式进行处理，可以避免捕捉到的异常影响程序的整体运行。

程序运行报错的信息，可以分为异常寻址信息，异常类型和具体的异常信息，三部分内容。

基本格式：

（在python2.x中，except语句格式，“except “错误类型” ，e：”；在python3.x中，except语句格式，“except “错误类型”  as e：”）

可以用　　raise　异常类型('异常具体信息')　 　进行主动异常出发，阻断程序的进一步执行。

常见用法：

多分支处理。利用except　列出每一种可以预知的异常类型，并给出相应的处理。

利用 except  Exception  可以捕捉到所有类型的异常，颗粒度较大。

else 之后跟的语句，是没有发生异常的情况下执行的语句

filnally 之后的语句，是无论被检测的代码块是否出现异常，都会执行的语句。通常可用于资源回收

断言assert简单介绍：

执行目的：断定语法应该是……类型

基本语法　assert 判断条件

返回的是布尔值，可以和if 判断结合使用。

其他类型的报错（异常）类型简介：

自定义异常：

在系统异常之外，自定义的异常可以协助我们铺捉到代码逻辑异常之外的业务逻辑异常。自定义异常继承自系统异常，一般情况下，自定义异常虽然能对系统异常进行重写，但一般情况下不建议，所以，一般情况下自定义异常命名不能用系统异常的名字。

