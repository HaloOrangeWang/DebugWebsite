
一 异常和错误

1.程序中难免出现错误，而错误分成两种

1.语法错误（这种错误，根本过不了Python解释器的语法检测，必须在程序执行前就改正）

2.逻辑错误

2.异常

异常就是程序运行时发生错误的信号，在Python中,错误触发的异常如下


二 异常处理

什么是异常？

异常就是我们语法上是没有问题,但是运行时就报错的称为异常, 异常发生之后剩余代码将不会继续执行

什么是异常处理

Python解释器检测到错误，触发异常（也允许程序员自己触发异常raise）

程序员编写特定的代码，专门用来捕捉这个异常（这段代码与程序逻辑无关，与异常处理有关）

如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃，这就是异常处理

为什么要进行异常处理？

Python解析器去执行程序，检测到了一个错误时，触发异常，异常触发后且没被处理的情况下，程序就在当前异常处终止，后面的代码不会运行，谁会去用一个运行着突然就崩溃的软件。

所以你必须提供一种异常处理机制来增强你程序的健壮性与容错性

处理异常的两种方式:

流程控制语句(if)

异常处理 -- "私人订制"


三 Python异常处理的'私人定制'

Python：为每一种异常定制了一个类型，然后提供了一种特定的语法结构用来进行异常处理

1 基本语法

读文件示例

未捕获到异常，程序直接报错

正确方法:

3 万能异常 - Exception

他可以捕获任意异常，例如：

你可能会说既然有万能异常，那么我直接用上面的这种形式就好了，其他异常可以忽略

你说的没错，但是应该分两种情况去看

如果你想要的效果是，无论出现什么异常，我们统一丢弃，或者使用同一段代码逻辑去处理，那么可以那么做

4 多分支

5 异常的其他结构

6 主动触发异常

7 自定义异常

8 断言

