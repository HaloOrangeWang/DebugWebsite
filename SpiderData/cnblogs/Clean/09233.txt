一日一技：让你的字典读取不报错

我们知道，读取 Python 字典时，如果某个 Key 不存在，Python 就会报错，如下图所示：

为了防止它报错，我们可以使用.get()方法：

但每次都要写.get()稍显麻烦。于是我们可以通过自己实现一个自定义的字典对象，来解决这个问题。

我们自定义一个类，继承dict，然后实现它的__missing__方法：

运行效果如下图所示：

只要这个 Key 不存在，就会返回 None。

在 Python 的collections工具模块中，有一个defaultdict实现了类似的事情。我们看它的使用方法。

a = defaultdict(str)接收一个函数，让a变量成为一个defaultdict类型的对象，它可以像普通字典一样被赋值和读取。

但是当你读取一个不存在的 key 时，它会自动生成一个默认值，并把默认值和这个 key 插入到字典中。这个默认值取决于你在defaultdict传入的参数。如果传入的是str那么默认值就是空字符串，如果是int那么默认值就是0.当然你也可以传入自定义的一个函数，从而控制这个默认值。例如我自定义一个函数，用于返回当前的时间，运行效果如下图所示：

当插入的 key 不存在时，就自动以当前时间作为默认值，并存入到字典中。

