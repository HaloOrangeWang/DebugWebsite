
异常捕获

异常：程序在运行过程中出现了不可预知的错误，并且该错误没有对应的处理机制，那么就会以异常的形式表现出来

影响：整个程序无法再正常运行


异常的结构


异常的类型

NameError


异常的信息

name 'safaf' is not defined


异常的位置


异常的种类


语法错误

程序错误编译成一般都会直接有提示，提示就应该直接解决的，出现语法错误一般是基础太差。


逻辑错误

这种错误是可以被容忍的，逻辑错误无法一眼看出来

针对逻辑上的错误可以采用异常处理机制来进行捕获


常见的错误类型


如何避免


异常处理

使用：在你认为可能会出现问题的代码上方用 try 包起来

注意：try 内部的代码块越少越好

异常处理能少用就少用，不然该报错的不报错哪里错了你都不知道

像服务端、客户端断开链接就需要用到异常处理，你不知道他什么时候会断开


异常处理使用模板（try.. except.. else.. finally..）

案例

补充

出错后会立即停止代码运行，去与except中的错误类型一个个比较，匹配上了就执行里面的代码，没匹配上就直接报错


主动抛出异常raise


断言assert

断言不成立直接报错


自定义异常（继承异常类）

报错类型，其实对应的就是一个个类（可以自定义拼接异常的格式）


UDP通信

UDP协议又叫用户数据报协议

它没有双向通道，类似于发短信（只管发，不管对方有没有收到，不需要对方立即回应）

UDP的程序可以先启动客户端再启动服务端（客户端发数据给服务端之前都没问题）

UDP类似于发短信

TCP类似于打电话，你一句我一句的


普通使用

服务端

客户端


TCP与UDP之间的区别

UDP 允许发空数据，不会有影响

UDP 直接启动客户端未启动服务端不会报错

UDP 不会有粘包问题（自带报头）

UDP 支持并发

服务端

客户端


简易版的QQ

服务器端

客户端1、2、3共用同一份代码


概念科普

并发

看起来像同时运行（直接启动多个UDP客户端）（默认的UDP程序多开就是这个效果）

并行

真正意义上的同时运行


socketserver模块科普

是给服务端用的(客户端还是用socket模块)，能够支持服务端的并发


TCP模拟UDP实现并发

服务器端

客户端


socketserver之UDP

服务器端

客户端


为什么UDP时重写的handle方法里不用写通信循环

