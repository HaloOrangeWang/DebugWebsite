
面向过程编程


强调：

面向过程编程绝对不是用函数编程这么简单，面向过程是一种编程思路、思想，而编程思路是不依赖于具体的语言或语法的。言外之意是即使我们不依赖于函数，也可以基于面向过程的思想编写程序


定义：

核心是 “过程” 二字，过程就是解决问题的步骤，即先干什么、再干什么、后干什么。所以基于该思想编写程序就好比设计一条一条的产品流水线

优点：复杂的问题流程化，进而就简单化（逻辑清晰，流程鲜明，便于理解）

缺点：一旦要修改功能，那么需要整体改造（牵一发而动全身，扩展性差）


应用：


模块


模块简介


python语言

最早起源于linux运维、胶水语言、调包侠(贬义词 >>> 褒义词)


什么是模块

模块就是一系列功能的集合体


为何要用模块

1、(自带的模块，第三方模块)--->拿来主义，极大的提升开发效率

2、自定义模块--->是为了解决代码冗余问题


模块有三种来源

1、内置的模块（①直接在python解释器内部的   ②标准库：下载python解释器就有的py文件）

1、内置的模块（①直接在python解释器内部的   ②标准库：下载python解释器就有的py文件）

2、第三方模块（下载第三方库：pip3 install requests）

2、第三方模块（下载第三方库：pip3 install requests）

3、自定义的模块（自己写的）

3、自定义的模块（自己写的）


模块的四种表现形式

1、使用python编写的代码，一个py文件就是一个模块，文件名叫test.py，模块名叫test

1、使用python编写的代码，一个py文件就是一个模块，文件名叫test.py，模块名叫test

3、已被编译为共享库或DLL的C或C++扩展

3、已被编译为共享库或DLL的C或C++扩展

2、一个包含有_init_.py文件的文件夹称之为包，包其实就是多个py文件(模块)的集合

2、一个包含有_init_.py文件的文件夹称之为包，包其实就是多个py文件(模块)的集合

4、使用C编写并连接到python解释器的内置模块

4、使用C编写并连接到python解释器的内置模块


模块的使用

模块都是用来被导入使用的，而不是直接运行


模块都是用来被导入使用的，而不是直接运行

以md.py为例来介绍模块的使用：文件名md.py，模块名md


import 句式


from...import... 句式


from..import..与import的对比


导入模块扩展用法


判断文件类型

编写好的一个python文件可以有两种用途：

1、脚本（执行文件），一个文件就是整个程序，用来被执行

2、模块，文件中存放着一堆功能，用来被导入使用

1、脚本（执行文件），一个文件就是整个程序，用来被执行

1、脚本（执行文件），一个文件就是整个程序，用来被执行

2、模块，文件中存放着一堆功能，用来被导入使用

2、模块，文件中存放着一堆功能，用来被导入使用


模块循环导入问题

模块循环导入抛出异常的根本原因是由于在python中模块被导入一次之后，就不会重新导入，只会在第一次导入时执行模块内代码。以后我们在导入模块的时候如果出现了循环导入的情况，说明你程序设计的不合理


上述错误解决方法：（一错再错，朝着错误的方向改）

在我们的项目中应该尽量避免出现循环导入的现象，如果出现多个模块都需要共享的数据，可以将共享的数据集中存放到某一个地方


模块导入的顺序

1、内存中已经导入好的


1、内存中已经导入好的

2、内置模块中查找


2、内置模块中查找

3、sys.path系统路径查找


3、sys.path系统路径查找

