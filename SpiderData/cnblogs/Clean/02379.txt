
python常见的异常类型？

异常有很多种类型，常见的由语法错误（SyntaxError）、类型错误（TypeError）、名字错误（NameError）等等，但我们要知道的是异常本身就是一个类的实例，所有的异常都继承于这个BaseException，在这个父类上又下分了下面四大类：

SystemExit   python退出异常

KeyboardInterrupt   键盘打断（ctrl+c）

GeneratorExit    生成器退出

Exception   普通异常

我们常见的python异常基本上都属于普通异常。


异常处理的机制

在Python当中，若一个程序在运行的时候出错，Python解释器会自动的在出错的地方生成一个异常对象，而后Python解释器会自动的在出错地方的附近寻找有没有对这个异常对象处理的代码，所谓异常处理代码就是try……except语句，如果没有，Python解释器会自动的将这个异常对象抛给其调用函数，就这样层层抛出，如果在main当中也没有对这个异常对象处理的代码，Python解释器最后会做一个简单粗暴的处理，将整个程序给终止掉，并将错误的信息在显示屏上输出。


捕获异常，防止程序因报错而中断

通常都是使用try......except......来处理异常，将可能出错的代码放在try里，用except来捕获可能的错误类型，从而自定义提示报错语句。

上面简单的例子可以看出，放在try的语句，一旦发现某一句有异常，后面的语句就不会再执行，然后会跳到except中来捕获这是一个什么异常类型。通常在我们不知道会出现什么异常类型时，我们就使用普通异常Except这个大范围，最后跳出except，继续执行后面的代码。

要注意的是，except后面可以只加‘：’，但这样就不会捕获出是什么异常。也可以加上具体的异常类型来捕获，更可以加上多种异常。

加多个异常也可以用一个except，后面用括号包含多个异常。

在捕获异常时，它会从上到下依次对比异常类型，找到之后就不会在往下找了。我们知道try里的语句出现错误时，会到except下捕获，但要是没有错误呢？事实上，在except后还能加上一个else，它会在try没有错误时来执行里面的代码。而在else后面，我们还能再加上finally，它是在无论try里面的语句有没有报错都会去执行。


自定义异常及主动抛出异常

我们可以自己定义一个异常类型，但这个异常类型必须继承于Exception。即使在没有报错的情况下，我们也可以自己抛出一个异常，格式为：raise 异常类型 。


断言

断言是用来检查非法情况而不是错误情况的，用来帮开发者快速定位问题的位置。异常处理用于对程序发生异常情况的处理，增强程序的健壮性和容错性。格式为：assert condition [，expression ]。一般情况下如assert （），这时会raise一个AssertionError出来，因为这时的condition为False。

应用场景：开发者所写的代码量大，但在编译时报出错误，又不能具体知道是哪出错了，这时可用断言来一步步检测代码。

