
一、什么是异常

异常就是程序运行时发生错误的信号，在python中,错误触发的异常如下


二、异常种类

　在python中不同的异常可以用不同的类型（python中统一了类与类型，类型即类）去标识，不同的类对象标识不同的异常，一个异常标识一种错误

常见异常：

其他异常：


三、异常处理

python解释器检测到错误，触发异常（也允许程序员自己触发异常）。程序员编写特定的代码，专门用来捕捉这个异常（这段代码与程序逻辑无关，与异常处理有关）。如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃，这就是异常处理。

　　python解释器去执行程序，检测到了一个错误时，触发异常，异常触发后且没被处理的情况下，程序就在当前异常处终止，后面的代码不会运行，谁会去用一个运行着突然就崩溃的软件。所以你必须提供一种异常处理机制来增强你程序的健壮性与容错性。良好的容错能力，能够有效的提高用户体验，维持业务的稳定性。

　　程序运行中的异常可以分为两类：语法错误和逻辑错误。首先，我们必须知道，语法错误跟异常处理无关，所以我们在处理异常之前，必须避免语法上的错误。


四、异常处理的方式


4.1 使用if判断式

　使用if判断式可以异常处理，但是if判断式的异常处理只能针对某一段代码，对于不同的代码段的相同类型的错误你需要写重复的if来进行处理。而且在你的程序中频繁的写与程序本身无关，与异常处理有关的if，会使得你的代码可读性极其的差。


4.2 python提供的特定的语法结构


part1:基本语


part2:单分


part3:多分


part4:万能异常

　　在python的异常中，有一个万能异常：Exception，他可以捕获任意异常。它是一把双刃剑，有利有弊，我们要视情况使用

　　如果你想要的效果是，无论出现什么异常，我们统一丢弃，或者使用同一段代码逻辑去处理他们，那么只有一个Exception就足够了。

　　如果你想要的效果是，对于不同的异常我们需要定制不同的处理逻辑，那就需要用到多分支了。我们可以使用多分支+万能异常来处理异常。使用多分支优先处理一些能预料到的错误类型,一些预料不到的错误类型应该被最终的万能异常捕获。需要注意的是，万能异常一定要放在最后，否则就没有意义了。


part5:try...else语句


part6:try...finally语句


part7:主动触发异常


part8:自定义异


part9:断言

assert断言是声明其布尔值必须为真的判定，如果发生异常就说明表达示为假。可以理解assert断言语句为raise-if-not，用来测试表示式，其返回值为假，就会触发异常。

assert的异常参数，其实就是在断言表达式后添加字符串信息，用来解释断言并更好的知道是哪里出了问题。格式如下：

assert expression [, arguments]

assert 表达式 [, 参数]

assert len(lists) >=5,'列表元素个数小于5'

assert 2==1,'2不等于1'

备注：格式：assert  条件  ， 条件为false时的错误信息            结果为raise一个AssertionError出来


part10：try..except的方式比较if的方式的好处

try..except这种异常处理机制就是取代if那种方式，让你的程序在不牺牲可读性的前提下增强健壮性和容错性

异常处理中为每一个异常定制了异常类型（python中统一了类与类型，类型即类），对于同一种异常，一个except就可以捕捉到，可以同时处理多段代码的异常（无需‘写多个if判断式’）减少了代码，增强了可读性


五、异常处理语法的小结

先完成功能 在测试的时候 一边修改代码 一边加上异常处理，只要加上异常处理,一定要写日志,不要在大段的代码外直接套上异常处理。应该是在具体的逻辑上(具体的细节处的代码段)加上细粒度异常处理。对于可以预料到的异常 一定要尽力的疏导 如果不能解决 必须要写上提示以及引发错误的原因

