作者：韩信子@ShowMeAI

教程地址：http://www.showmeai.tech/tutorials/56

本文地址：http://www.showmeai.tech/article-detail/87

声明：版权所有，转载请联系平台与作者并注明出处


1.Python3错误和异常

我们在实际编程过程中，经常会看到一些报错信息，在python中也有专门的方式去处理错误和异常，保证全局流程顺畅。

Python中的语法错误和异常很容易被辨认，我们也可以借助try...except来做相应的处理。


2.语法错误

初学者经常会遇到Python的语法错误或解析错，如下实代码示例

这个例子中，函数 print() 被检查到有错误，在它前面缺少了一个冒号 : 。

语法分析器指出了出错的一行，并且在最先找到的错误的位置标记了一个小小的箭头。


3.异常

即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。

大多数的异常都不会被程序处理，都以错误信息的形式展现在这里（下列代码可以在在线python3环境中运行）:

结果如下：

异常以不同的类型出现，这些类型都作为信息的一部分打印出来: 例子中的类型有 ZeroDivisionError，NameError 和 TypeError。

错误信息的前面部分显示了异常发生的上下文，并以调用栈的形式显示具体信息。


4.异常处理


（1）try-except

异常捕捉可以使用 try/except 语句。

以下例子中，让用户输入一个合法的整数，但是允许用户中断这个程序（使用 Control-C 或者操作系统提供的方法）。用户中断的信息会引发一个 KeyboardInterrupt 异常。

try 语句按照如下方式工作；

首先，执行 try 子句（在关键字 try 和关键字 except 之间的语句）。

如果没有异常发生，忽略 except 子句，try 子句执行后结束。

如果在执行 try 子句的过程中发生了异常，那么 try 子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的 except 子句将被执行。

如果一个异常没有与任何的 except 匹配，那么这个异常将会传递给上层的 try 中。

一个 try 语句可能包含多个except子句，分别来处理不同的特定的异常，其中只有一个分支会被执行。

处理程序将只针对对应的 try 子句中的异常进行处理，而不是其他的 try 的处理程序中的异常。

一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:

最后一个except子句可以忽略异常的名称，它将被当作通配符使用。你可以使用这种方法打印一个错误信息，然后再次把异常抛出。


（2）try-except-else

try/except 语句还有一个可选的 else 子句，如果使用这个子句，那么必须放在所有的 except 子句之后。

else 子句将在 try 子句没有发生任何异常的时候执行。

以下实例在 try 语句中判断文件是否可以打开，如果打开文件时正常的没有发生异常则执行 else 部分的语句，读取文件内容：

使用 else 子句比把所有的语句都放在 try 子句里面要好，这样可以避免一些意想不到，而 except 又无法捕获的异常。

异常处理并不仅仅处理那些直接发生在 try 子句中的异常，而且还能处理子句中调用的函数（甚至间接调用的函数）里抛出的异常。例如:


（3）try-finally语句

try-finally 语句无论是否发生异常都将执行最后的代码。

以下实例中 finally 语句无论异常是否发生都会执行：


5.抛出异常

Python 使用 raise 语句抛出一个指定的异常。

raise语法格式如下：

以下示例代码如果 x 大于 10 就触发异常:

执行以上代码会触发异常：

raise 唯一的一个参数指定了要被抛出的异常。它必须是一个异常的实例或者是异常的类（也就是 Exception 的子类）。

如果你只想知道这是否抛出了一个异常，并不想去处理它，那么一个简单的 raise 语句就可以再次把它抛出。


6.用户自定义异常

你可以通过创建一个新的异常类来拥有自己的异常。异常类继承自 Exception 类，可以直接继承，或者间接继承，例如:

在这个例子中，类 Exception 默认的 init() 被覆盖。

当创建一个模块有可能抛出多种不同的异常时，一种通常的做法是为这个包建立一个基础异常类，然后基于这个基础类为不同的错误情况创建不同的子类:

大多数的异常的名字都以"Error"结尾，就跟标准的异常命名一样。


7.定义清理行为

try 语句还有另外一个可选的子句，它定义了无论在任何情况下都会执行的清理行为。 例如:

以上例子不管 try 子句里面有没有发生异常，finally 子句都会执行。

如果一个异常在 try 子句里（或者在 except 和 else 子句里）被抛出，而又没有任何的 except 把它截住，那么这个异常会在 finally 子句执行后被抛出。

下面是一个更加复杂的例子（在同一个 try 语句里包含 except 和 finally 子句）:


8.预定义的清理行为

一些对象定义了标准的清理行为，无论系统是否成功的使用了它，一旦不需要它了，那么这个标准的清理行为就会执行。

这面这个例子展示了尝试打开一个文件，然后把内容打印到屏幕上:

以上这段代码的问题是，当执行完毕后，文件会保持打开状态，并没有被关闭。

关键词 with 语句就可以保证诸如文件之类的对象在使用完之后一定会正确的执行他的清理方法:

以上这段代码执行完毕后，就算在处理过程中出问题了，文件 f 总是会关闭。


9.视频教程

也可以点击 这里 到B站查看有【中英字幕】的版本

【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~

https://www.bilibili.com/video/BV1yg411c7Nw?p=37&share_source=copy_web


资料与代码下载

本教程系列的代码可以在ShowMeAI对应的github中下载，可本地python环境运行，可以访问google的宝宝也可以直接借助google colab一键运行与交互操作学习哦！

本教程系列涉及的Python速查表可以在以下地址下载获取：

Python速查表


拓展参考资料

Python教程—Python3文档

Python教程-廖雪峰的官方网站


ShowMeAI相关文章推荐

python介绍

python安装与环境配置

python基础语法

python基础数据类型

python运算符

python条件控制与if语句

python循环语句

python while循环

python for循环

python break语句

python continue语句

python pass语句

python字符串及操作

python列表

python元组

python字典

python集合

python函数

python迭代器与生成器

python数据结构

python模块

python文件读写

python文件与目录操作

python错误与异常处理

python面向对象编程

python命名空间与作用域

python时间和日期


ShowMeAI系列教程推荐

图解Python编程：从入门到精通系列教程

图解数据分析：从入门到精通系列教程

图解AI数学基础：从入门到精通系列教程

图解大数据技术：从入门到精通系列教程

