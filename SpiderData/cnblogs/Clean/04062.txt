目录一、什么是异常1.1 语法错误1.2 逻辑错误二、异常的种类2.1 常用异常2.2 其他异常三、异常处理3.1 提前预防3.2 之后预防四、try...except总结五、抛出异常raise5.1 自定义异常六、断言assert

目录

一、什么是异常1.1 语法错误1.2 逻辑错误

1.1 语法错误

1.2 逻辑错误

二、异常的种类2.1 常用异常2.2 其他异常

2.1 常用异常

2.2 其他异常

三、异常处理3.1 提前预防3.2 之后预防

3.1 提前预防

3.2 之后预防

四、try...except总结

五、抛出异常raise5.1 自定义异常

5.1 自定义异常

六、断言assert


一、什么是异常

异常就是程序运行时发生错误的信号（在程序出现错误时，则会产生一个异常，若程序没有处理它，则会抛出该异常，程序的运行也随之终止），在python中，错误触发的异常如下


1.1 语法错误

语法错误，根本过不了python解释器的语法检测，必须在程序执行前就改正。


1.2 逻辑错误


二、异常的种类

在python中不同的异常可以用不同的类型（python中统一了类与类型，类型即类）去标识，一个异常标识一种错误。


2.1 常用异常

AttributeError 试图访问一个对象没有的树形，比如foo.x，但是foo没有属性x

IOError 输入/输出异常；基本上是无法打开文件

ImportError 无法引入模块或包；基本上是路径问题或名称错误

IndentationError 语法错误（的子类） ；代码没有正确对齐

IndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[5]

KeyError 试图访问字典里不存在的键

KeyboardInterrupt Ctrl+C被按下

NameError 使用一个还未被赋予对象的变量

SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）

TypeError 传入对象类型与要求的不符合

UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，导致你以为正在访问它

ValueError 传入一个调用者不期望的值，即使值的类型是正确的


2.2 其他异常

ArithmeticError

AssertionError

AttributeError

BaseException

BufferError

BytesWarning

DeprecationWarning

EnvironmentError

EOFError

Exception

FloatingPointError

FutureWarning

GeneratorExit

ImportError

ImportWarning

IndentationError

IndexError

IOError

KeyboardInterrupt

KeyError

LookupError

MemoryError

NameError

NotImplementedError

OSError

OverflowError

PendingDeprecationWarning

ReferenceError

RuntimeError

RuntimeWarning

StandardError

StopIteration

SyntaxError

SyntaxWarning

SystemError

SystemExit

TabError

TypeError

UnboundLocalError

UnicodeDecodeError

UnicodeEncodeError

UnicodeError

UnicodeTranslateError

UnicodeWarning

UserWarning

ValueError

Warning

ZeroDivisionError


三、异常处理

为了保证程序的健壮性与容错性，即在遇到错误时程序不会崩溃，我们需要对异常进行处理


3.1 提前预防

如果错误发生的条件是可预知的，我们需要用if进行处理：在错误发生之前进行预防


3.2 之后预防

如果错误发生的条件是不可预知的，则需要用到try...except：在错误发生之后进行处理

1.异常类只能用来处理指定的异常情况，如果非指定异常则无法处理。

2.多分支

3.万能异常Exception

4.多分支异常与万能异常

5.也可以在多分支后来一个Exception

6.异常的最终执行


四、try...except总结

把错误处理和真正的工作分开来

代码更易组织，更清晰，复杂的工作任务更容易实现；

毫无疑问，更安全了，不至于由于一些小的疏忽而使程序意外崩溃了；


五、抛出异常raise


5.1 自定义异常


六、断言assert

