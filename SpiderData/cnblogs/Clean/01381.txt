
一、什么是异常


　　1.1 异常表现形态

　　　　异常是在程序运行时，发生的错误，在python中体现形式如下


　　1.2 错误分为两大类

# 语法错误实例一
if

# 语法错误实例二
#class

# 语法错误实例三
x=

.....

# NameError
 xxx

# ValueError
 int('aaa')

# IndexError
 l=[1,2,]
 l[100]

# KeyError
 d={'x':1}
 d['y']

# TypeError
 for k in 3:  # 3 不是可迭代对象
     print(k)

# ...


二、异常种类

　　在python中不同的报错类型，可以使用不同的种类识别


三、如何处理异常


　　3.1 处理异常的必要性

　　　　为了保证程序的健壮性与容错性，即在遇到错误时程序不会崩溃，我们需要对异常进行处理。

　　　　程序员无法保证程序在于用户交互时一定是确定的，所以需要异常处理，防止代码程序泄露和崩溃


　　3.2 被动异常处理

# Exception 捕获任何类型的报错，并将异常值丢给e


　　3.3 主动异常处理

　　　　语法：raise 异常类('异常信息')

　　　　如： raise TypeError('错误')


　　


　　3.4 自定义报错类


　　3.5 断言：assert 条件

　　解释：断言条件是成立的，继续执行下面的代码，不成立就报错

assert 1==2

# 等同于
if not 1==2:
    raise AssertionError('1 != 2')


　　3.6 总结

# 1：把错误处理和真正的工作分开来
# 2：代码更易组织，更清晰，复杂的工作任务更容易实现；
# 3：毫无疑问，更安全了，不至于由于一些小的疏忽而使程序意外崩溃了；


四、什么情况下需要使用异常

在条件无法判断时，使用try...except....

可以判断时尽量少用try...except....

