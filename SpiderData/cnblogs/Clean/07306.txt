
1. python内置异常处理


单分支异常处理：try...except

单分支异常处理是当你在知道确定会出现什么异常的情况下，使用单分支异常处理。


多分支异常处理：try...except...except...

从上到下报错的代码只要找到与它相同的分支，就执行这个分支中的代码，之后结束程序。

如果找不到处理和报错类型相同的错误分支，那么程序会一直向下走，直到找到与它相同的错误分支并执行分支中的代码，否则就会程序报错。


多分支合并：try...except...except...

如果用户输入的内容错误较多，而使用多个except会很麻烦，这时可以使用多分支合并。


万能异常：try...except Exception as e...

当程序整体开发完成，并测试完毕之后，才会使用万能异常。当你不知道你的程序会报什么错误的时候，可以使用万能异常。

万能异常还有另外一中写法: try...except...：


多分支+万能异常：try...except...except Exception as e：

万能异常要永远在程序的最下方。


else分支：try...except...else...

当程序没有报错的时候执行else中的代码，当报错时执行except中的代码 块。


finally分支

无论程序有没有报错，都会执行finally中的语句。

如果try中的代码内容最终有 return返回值，且这段代码 最终报错了，那么也会先执行finally中的代码，再去执行retrun。

注意：except后面能够跟上具体的报错类型，一旦跟上了具体的报错类型，那么当前的except就只能捕获跟上的报错类型的错误，不能捕获其余的异常。


主动抛出异常：raise

主动抛出异常主要用于给其他开发者使用。

当开发者认为这一段代码可能会出现报错，并且明确知道了异常的类型 ，那么就会使用raise函数，后面跟上认为会出现的错误异常，并自定义异常提示。这样就可以在代码的末尾使用except去捕获这个异常。


2. 自定义异常

自定义异常，其关键在于自定义的异常类要继承Exception这个类。

在主逻辑代码中，我们要主动的抛出异常，抛出的异常就是我们自定义的异常类。

