一、异常和错误

1、语法错误（这种错误根本过不了python解释器的语法检测，必须在程序执行前就改正），如下示例：

# 语法错误示范一
    if

# 语法错误示范二
    def test:
        pass

# 语法错误示范三
    print(haha
    # 错误提示都为：SyntaxError: invalid syntax

2、逻辑错误，如下示例：

# 用户输入不完整(比如输入为空)或者输入非法(输入不是数字)
    num = input(">>: ")
    int(num)

# 无法完成计算
    res1 = 1/0
    res2 = 1 + 'str'

逻辑错误

二、什么是异常

异常就是程序运行时发生报错的信号，类似如下信息：

　　　　Traceback (most recent call last):

　　File "E:/pythonDemo/1-basis/test20.py", line 43, in <module>

　　int(num)

　　　　ValueError: invalid literal for int() with base 10: 't'

　　当异常发生之后，异常之后的代码就不执行了。

　　什么时候最容易出异常？

　　　　当你要处理的内容不确定的时候（有用户参与、有外界数据接入 : 从文件中读或者从网络上获取）。

　　当有多行报错的时候是为什么?

　　　　在嵌套调用的过程中，内部的代码出了问题，外部所有的调用的地方都成为报错追溯信息的一部分。

　　怎么解决？

　　　　从下往上找，首先找到自己写的代码码出错的那一行分析出错原因，或者把报错的最后一行即错误类型和详细提示自己百度，再结合报错的那一行解决问题。

三、python中异常的种类

在python中不同的异常可以用不同的类型（python中统一了类与类型，类型即类）去标识，不同的类对象标识不同的异常，一个异常标识一种错误。如下示例：

# 触发 IndexError
    l=['egon','aa']
    l[3]

# 触发 KeyError
    dic={'name':'egon'}
    dic['age']

# 触发 ValueError
    s='hello'
    int(s)

异常类型

　　

四、什么是异常处理？为什么要进行异常处理？

python解释器检测到错误，触发异常（也允许程序员自己触发异常），程序员编写特定的代码，专门用来捕捉这个异常（这段代码与程序逻辑无关，与异常处理有关），如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃，这就是异常处理。

python解释器去执行程序，检测到了一个错误时，触发异常，异常触发后且没被处理的情况下，程序就在当前异常处终止，后面的代码不会运行，谁会去用一个运行着突然就崩溃的软件。所以你必须提供一种异常处理机制来增强你程序的健壮性与容错性。

五、如何进行异常处理

首先须知，异常是由程序的错误引起的，语法上的错误跟异常处理无关，必须在程序运行前就修正。

5.1 使用if判断式，如下示例：

总结：

　　(1) if判断式的异常处理只能针对某一段代码，对于不同的代码段的相同类型的错误你需要写重复的if来进行处理。

　　(2) 在你的程序中频繁的写与程序本身无关，与异常处理有关的if，会使得你的代码可读性极其的差。

　　(3) if是可以解决异常的，只是存在1,2的问题，所以，千万不要妄下定论if不能用来异常处理。

5.2 python为每一种异常定制了一个类型，然后提供了一种特定的语法结构用来进行异常处理，有如下几种语法：

1）基本语法

　

2）单分支：只能用来处理指定的异常情况，如果非指定异常则无法处理。如下示例：　　

l = ['login','register']
    for num,i in enumerate(l,1):
           print(num,i)

3）多分支：　　

l = ['login','register']
    for num,i in enumerate(l,1):
        print(num,i)

4）多分支合并：　　

l = ['login','register']
    for num,i in enumerate(l,1):
        print(num,i)

5）万能异常：在python的异常中，有一个万能异常：Exception，他可以捕获任意异常，如下示例：　　

　

6）多分支+万能异常：万能异常永远放在异常处理的最下面，如下示例：　　

7）else分支：当try中代码不发生异常时执行else分支　　

8）finally分支：无论如何都会被执行　　

总结：finally用来回收一些操作系统的资源 : 数据库连接、打开的文件句柄、网络连接。

　　9）主动抛出异常：是给其他开发者用的，如下：

raise ValueError
    raise ValueError('你写的不对')

　　10）断言（一种语法）

　　# assert 条件(只能接受一个布尔值)
　　assert 1 == 1
　　assert 1 == 2

11）自定义异常（学完面向对象之后再学）

总结：异常处理的几种情况，如下：

　

try..except的方式比较if的方式的好处：

try..except这种异常处理机制就是取代if那种方式，让你的程序在不牺牲可读性的前提下增强健壮性和容错性，

异常处理中为每一个异常定制了异常类型（python中统一了类与类型，类型即类），对于同一种异常，一个except就可以捕捉到，可以同时处理多段代码的异常（无需‘写多个if判断式’）减少了代码，增强了可读性 。

使用try..except的方式

　　1：把错误处理和真正的工作分开来；

　　2：代码更易组织，更清晰，复杂的工作任务更容易实现；

　　3：毫无疑问，更安全了，不至于由于一些小的疏忽而使程序意外崩溃了；

什么时候用异常处理？

　　异常处理的忠告：在最外层的异常处理应该在所有的开发测试结束之后才放。

　　try...except应该尽量少用，因为它本身就是你附加给你的程序的一种异常处理的逻辑，与你的主要的工作是没有关系的，这种东西加的多了，会导致你的代码可读性变差，只有在有些异常无法预知的情况下，才应该加上try...except，其他的逻辑错误应该尽量修正。

　

