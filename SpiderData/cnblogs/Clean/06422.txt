
python 基础学习 第十八天 （二）


一异常和错误


1 程序中难免出现错误，而错误分成两种

1.语法错误（这种错误，根本过不了Python解释器的语法检测，必须在程序执行前就改正）

2.逻辑错误（逻辑错误）


2 什么是异常

异常就是程序运行时发生错误的信号，在Python中,错误触发的异常如下


3 Python中的异常种类

在python中不同的异常可以用不同的类型（Python中统一了类与类型，类型即类）去标识，不同的类对象标识不同的异常，一个异常标识一种错误


二 异常处理

什么是异常？

异常就是我们语法上是没有问题,但是运行时就报错的称为异常, 异常发生之后剩余代码将不会继续执行

什么是异常处理

Python解释器检测到错误，触发异常（也允许程序员自己触发异常raise）

程序员编写特定的代码，专门用来捕捉这个异常（这段代码与程序逻辑无关，与异常处理有关）

如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃，这就是异常处理

为什么要进行异常处理？

Python解析器去执行程序，检测到了一个错误时，触发异常，异常触发后且没被处理的情况下，程序就在当前异常处终止，后面的代码不会运行，谁会去用一个运行着突然就崩溃的软件。

所以你必须提供一种异常处理机制来增强你程序的健壮性与容错性

如何进行异常处理？

首先须知，异常是由程序的错误引起的，语法上的错误跟异常处理是无关，语法错误必须在程序运行前就修正

处理异常的两种方式:

流程控制语句(if)

异常处理 -- "私人订制"


一 : 流程控制语句

问题一： 使用if 的方式我们只为第一段代码加上了异常处理，但这些if，跟你的代码逻辑并无关系，这样你的代码会因为可读性差而不容易被看懂

问题二： 这只是我们代码中的一个小逻辑，如果类似的逻辑多，那么每一次都需要判断这些内容，就会倒置我们的代码特别冗长。

总结：

1.if判断式的异常处理只能针对某一段代码，对于不同的代码段的相同类型的错误你需要写重复的if来进行处理。

2.在你的程序中频繁的写与程序本身无关，与异常处理有关的if，会使得你的代码可读性极其的差

3.if是可以解决异常的，只是存在1,2的问题，所以，千万不要妄下定论 if 不能用来异常处理


二 Python异常处理的'私人定制'

Python：为每一种异常定制了一个类型，然后提供了一种特定的语法结构用来进行异常处理


1 基本语法


2 异常类处理指定的异常情况


3 万能异常 - Exception

他可以捕获任意异常，例如：

你可能会说既然有万能异常，那么我直接用上面的这种形式就好了，其他异常可以忽略

你说的没错，但是应该分两种情况去看

1.如果你想要的效果是，无论出现什么异常，我们统一丢弃，或者使用同一段代码逻辑去处理他们，那么骚年，大胆的去做吧，只有一个Exception就足够了。


4 多分支


5 异常的其他结构


6 主动触发异常


7 自定义异常


8 断言


9 try..except的方式比较if的方式的好处

try..except这种异常处理机制就是取代if那种方式，让你的程序在不牺牲可读性的前提下增强健壮性和容错性

异常处理中为每一个异常定制了异常类型（Python中统一了类与类型，类型即类），对于同一种异常，一个except就可以捕捉到，可以同时处理多段代码的异常（无需‘写多个if判断式’）减少了代码，增强了可读性

使用try..except的方式

1：把错误处理和真正的工作分开来 2：代码更易组织，更清晰，复杂的工作任务更容易实现； 3：毫无疑问，更安全了，不至于由于一些小的疏忽而使程序意外崩溃了；


什么时候用异常处理

有的同学会这么想，学完了异常处理后，好强大，我要为我的每一段程序都加上try...except，干毛线去思考它会不会有逻辑错误啊，这样就很好啊，多省脑细胞===》2B青年欢乐多

try...except应该尽量少用，因为它本身就是你附加给你的程序的一种异常处理的逻辑，与你的主要的工作是没有关系的 这种东西加的多了，会导致你的代码可读性变差，只有在有些异常无法预知的情况下，才应该加上try...except，其他的逻辑错误应该尽量修正

