
4.2 异常捕获

什么是异常？？

代码运行出错，会导致异常，异常发生后，如果没有解决方法，则会导致整个程序结束。

什么是异常？？

代码运行出错，会导致异常，异常发生后，如果没有解决方法，则会导致整个程序结束。

异常的三个重要组成部分：

异常的追踪信息traceback

翻到错误的最下面，从下往上第一个蓝色字体鼠标左键点击，即可跳转到错误代码所在行。
异常的类型

xxxxError
异常的原因

异常的类型冒号后面的内容。

错误的详细原因很重要。

看完之后可能找到解决的方法。

异常的三个重要组成部分：

异常的追踪信息traceback

翻到错误的最下面，从下往上第一个蓝色字体鼠标左键点击，即可跳转到错误代码所在行。

异常的类型

xxxxError

异常的原因

异常的类型冒号后面的内容。

错误的详细原因很重要。

看完之后可能找到解决的方法。

错误的种类

语法错误

不被允许的，出现了就立刻修改！！
逻辑错误

可以被允许，出现之后尽快修改即可

修改逻辑错误的过程，其实就是在从头到尾清理思路的过程。

NameError

IndexError

KeyError

ValueError

...等等

错误的种类

语法错误

不被允许的，出现了就立刻修改！！

逻辑错误

可以被允许，出现之后尽快修改即可

修改逻辑错误的过程，其实就是在从头到尾清理思路的过程。

NameError

IndexError

KeyError

ValueError

...等等

捕获异常的基本语法结构

异常捕获补充

else & finally用法
try:
	l = []
	l[10]
except NameError as e:
	print('名字错误')
except KeyError as e:
	print('键错误')
except IndexError as e:
	print('索引错误')
else:
	print('当被监测代码没报错，正常运行结束之后会走这里')
finally:
	print('无论被监测代码报错与否，最终都要走这里')

try:
	被监测代码
except 错误类型 as e:
	...
	...
else:
	被监测代码不报错的时候执行
finally:
	无论是否报错最终都会执行这里

断言语句（用的很少，了解一下）
name = 'jason'
assert isinstance((name), int)
# AssertionError

主动报异常
# 在监测机制中用到
raise NameError

异常捕获补充

else & finally用法

断言语句（用的很少，了解一下）

主动报异常

