异常处理,  平时用得非常多的, 即便程序的逻辑很简单, 但总是要考虑各种各样的情况出现, 为了使得程序更加健壮, 异和用户体验更好, 异常处理是必须掌握的. 同时, 在调试的时候, 捕捉异常也是一种最为常见的 找 bug 的方式呀.

场景无非就两个:

尝试捕捉异常:  try ... except , 一般用万能的异常类 Exception

主动抛出异常:  raise .....


常见异常


异常处理结构

基本思路:先尝试运行代码,如果没有问题就正常执行,如果发生错误就尝试去捕获和处理,最后实在没有办法了才程序崩溃,从某个角度看,异常处理结构也属于选择结构的变形


try - except


try - except - else

没有异常,执行else,异常则不走else, 类似 for/while - else 结构

注意:不要把太多的代码放在try中,而是放真正可能会引发异常的代码


try -  except - finally

不论异常否,最后都会被执行,可用来做一些清理工作如,释放try代码申请的资源等等

finally 子句也会发生异常


可做多种异常的异常处理结构


自定义异常类


断言assert 与上下文管理语句

assert 语句常用来在程序的某个位置确认某个条件必须满足.

assert仅当脚本的__ debug __ 属性值为True 时有效,一般只在开发和测试阶段使用,(程序编译为字节码时,assert语句将被删除


小结

程序出错是一件非常难以避免的事情

程序出错是一件非常难以避免的事情

异常一般指程序运行时发生的错误

异常一般指程序运行时发生的错误

程序运行时出现错误会自动引发异常,程序员可通过raise语句显式引发异常

程序运行时出现错误会自动引发异常,程序员可通过raise语句显式引发异常

合理使用异常结构try-except-else-finally 可以使得程序更加健壮

合理使用异常结构try-except-else-finally 可以使得程序更加健壮

try - except - else, 当程序异常则不会执行else;  finally, 不论怎样都会执行,可用来清理try代码块的空间等工作

try - except - else, 当程序异常则不会执行else;  finally, 不论怎样都会执行,可用来清理try代码块的空间等工作

