---恢复内容开始---


异常处理

在执行Python程序的时候，经常会有程序语句没有错误，但程序却无法执行的情况发生，这就是

异常。一般情况下，程序无法执行时会产生一个异常，程序会因此终止。异常是程序的一种特殊

错误，而不是普通的语法错误，异常通常是编写程序时没有考虑到的例外情况。异常发生后经过

妥善处理可以继续执行，这种措施就是异常处理。


异常处理语句

Python用try...except...语句来进行异常处理，基本格式为：

当Python解释器遇到一个try语句，首先会去执行<程序执行语句>中的内容。

（1）如果try语句中没有错误，终止转到try-except后面的语句。

（2）如果出现报错，Python解释器会找到一个符合该错误的异常语句，然后执行处理语句。


else语句和finally语句的作用

else：在try中不存在任何异常时，才会执行else中的语句。程序中如果有else语句，继续执行else

语句，else语句内也是程序执行语句的一部分，相当于是try-except语句的补充语句，通常try-except

后的语句都会放在else中，因为当程序有异常时它会终止语句继续执行。如果没有else，而又有后

续的执行语句，当try中出现异常，程序也不会停止而继续执行，这样程序执行效率就会大大降低。

finally：不管程序有或者没有异常，finally语句都会执行。finally语句是程序结束语句，给程序做收

尾工作，这个方法在某些必须要结束的操作中颇为有用，如释放文件句柄，或释放内存空间等。

实例：

if __name__=="__main__":

try:

a,b=eval(input("请输入两个数，用逗号隔开"))

result=a/b

except ZeroDivisionError:

print("0不能作为被除数")

except SyntaxError:

print("没有输入逗号")

except TypeError:

print("输入类型有误")

else:

print("没有异常，结果为：",result)

finally:

print("程序执行完毕")

输出结果：

---恢复内容结束---

